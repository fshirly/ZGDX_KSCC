package com.fable.kscc.api.skyCloud;

import org.apache.commons.net.ftp.FTPClient;
import org.apache.commons.net.ftp.FTPClientConfig;
import org.apache.commons.net.ftp.FTPFile;
import org.apache.commons.net.ftp.FTPReply;

import java.io.*;
import java.util.Date;

public class FtpUtil {

	private static String LOCAL_CHARSET = "utf-8";

	public static void main(String[] args) {
        DownFTPParam param = new DownFTPParam();
        param.setHost("202.127.28.81");
        param.setUsername("admin");
        param.setPassword("admin123");
        param.setPathDst("");
        param.setPathSrc("");
		FileDownload(param);
    }

	public static boolean FileDownload(DownFTPParam param) {
		// ftp服务器登录凭证
//		String host = "202.127.28.81";// 编解码器ip
//		int port = 21;// 编解码器端口
//		String user = "admin";// ftp用户名
//		String password = "admin123";// ftp密码
//		String txtFileDir = "/tmp/disk/02_02/2017年10月18日/0104563/";// 文件存储位置
//		String txtSaveDir = "E:/test/";// 下载下来的本地目录
		BufferedInputStream bis = null;
		BufferedOutputStream bos = null;
		boolean flag=false;

		FTPClient ftp = null;
		try {

			// ftp的数据下载
			ftp = new FTPClient();
			ftp.connect(param.getHost(), param.getPort());
			ftp.login(param.getUsername(), param.getPassword());
			ftp.setFileType(FTPClient.BINARY_FILE_TYPE);

			// 设置linux环境
			FTPClientConfig conf = new FTPClientConfig(FTPClientConfig.SYST_UNIX);
			ftp.configure(conf);

			// 判断是否连接成功
			int reply = ftp.getReplyCode();
			if (!FTPReply.isPositiveCompletion(reply)) {
				ftp.disconnect();
				System.out.println("FTP server refused connection.");
				return flag;
			}

			ftp.setControlEncoding(LOCAL_CHARSET);
			// 设置访问被动模式
			ftp.setRemoteVerificationEnabled(false);
			ftp.enterLocalPassiveMode();

			// 检索ftp目录下所有的文件，利用时间字符串进行过滤
			boolean dir = ftp.changeWorkingDirectory(new String(param.getPathSrc().getBytes("UTF-8"), "ISO8859-1"));
			if (dir) {
				FTPFile[] fs = ftp.listFiles();
				for (FTPFile f : fs) {
					if (!f.getName().contains(".properties")) {
						System.out.println(new Date() + "开始下载文件");
						File localFile = new File(param.getPathDst() + f.getName());
						 System.out.println(f.getSize());
						bis = new BufferedInputStream(
								ftp.retrieveFileStream(new String(f.getName().getBytes("UTF-8"), "ISO8859-1")));
						bos = new BufferedOutputStream(new FileOutputStream(localFile));

						byte[] szBuf = new byte[128 * 1024];
						int dwRead;
						while ((dwRead = bis.read(szBuf, 0, 128 * 1024)) != -1) {
							try {
								bos.write(szBuf, 0, dwRead);
								bos.flush();
							} catch (Exception e) {
							    e.printStackTrace();
							}
						}
						System.out.println(new Date() + "文件下载成功");
					}
				}
				flag=true;
			}
		} catch (Exception e) {
			e.printStackTrace();
			System.out.println(new Date() + "  ftp下载文件发生错误");
		} finally {
			if (ftp != null)
				try {
					ftp.disconnect();
				} catch (IOException ioe) {
					ioe.printStackTrace();
				}
			try {
				if (bis != null)
					bis.close();
				if (bos != null)
					bos.close();
			} catch (IOException e) {
			    e.printStackTrace();
			}
		}
		return flag;
	}

}
