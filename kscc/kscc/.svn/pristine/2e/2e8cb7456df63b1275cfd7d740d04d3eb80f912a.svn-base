package com.fable.kscc.bussiness.controller.livebroadcast;

import com.alibaba.fastjson.JSON;
import com.fable.kscc.api.model.hospitalInformation.FbsHospitalInformation;
import com.fable.kscc.api.model.livebroadcast.FbsLiveBroadcast;
import com.fable.kscc.api.model.message.FbsLiveMessage;
import com.fable.kscc.api.model.page.PageRequest;
import com.fable.kscc.api.model.page.PageResponse;
import com.fable.kscc.api.model.page.ResultKit;
import com.fable.kscc.api.model.page.ServiceResponse;
import com.fable.kscc.api.model.participant.FbsLiveParticipant;
import com.fable.kscc.api.model.user.FbsUser;
import com.fable.kscc.api.utils.FileUtil;
import com.fable.kscc.api.utils.JsonUtil;
import com.fable.kscc.bussiness.mapper.LiveMessage.LiveMessageMapper;
import com.fable.kscc.bussiness.mapper.hospitalInformation.HospitalInformationMapper;
import com.fable.kscc.bussiness.mapper.fbsUser.FbsUserMapper;
import com.fable.kscc.bussiness.mapper.liveparticipant.LiveParticiPantMapper;
import com.fable.kscc.bussiness.service.livebroadcast.LiveBroadCastService;
import org.codehaus.jackson.type.TypeReference;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Controller;
import org.springframework.stereotype.Service;
import org.springframework.web.bind.annotation.*;
import org.springframework.web.multipart.MultipartFile;
import org.springframework.web.servlet.ModelAndView;

import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpSession;
import java.text.SimpleDateFormat;
import java.util.*;

@Controller
@RequestMapping("/liveBroadCastController")
public class LiveBroadCastController {

	private final Logger logger = LoggerFactory.getLogger(LiveBroadCastController.class);

	@Autowired
	private LiveBroadCastService liveBroadCastService;

	@Autowired
    private FbsUserMapper ksUserMapper;

	@Autowired
	LiveMessageMapper liveMessageMapper;

	@Autowired
	LiveParticiPantMapper liveParticiPantMapper;

	@Autowired
	HospitalInformationMapper hospitalInformationMapper;

	/**
	 * 创建直播申请
	 * @param broadcast
	 * @return
	 */
	@RequestMapping(value="/createLiveApplications" , method=RequestMethod.POST )
	@ResponseBody
	public ServiceResponse createLiveApplications(@RequestBody FbsLiveBroadcast broadcast){
		return liveBroadCastService.createLiveApplications(broadcast);
	}


	//我的直播
	@RequestMapping("/myLiveBroadcast")
	@ResponseBody
	public ServiceResponse myLiveBroadcast(@RequestBody Map<String,Object> map){
		return liveBroadCastService.getLiveBroadCast(map);
	}
	//我申请的直播
	@RequestMapping("/queryLiveBroadcast")
	@ResponseBody
	public ServiceResponse queryLiveBroadcast(@RequestBody Map<String,Object> map){
		return liveBroadCastService.applyBroadCast(map);
	}

	@RequestMapping("/getUserId")
	@ResponseBody
	public FbsUser getUserId(HttpServletRequest request){
 			FbsUser user=(FbsUser)request.getSession().getAttribute("ksUser");
		return user;
	}

	@RequestMapping("/inviteLive")
	@ResponseBody
	public ServiceResponse inviteLive(@RequestBody Map<String,Object> map) {
		return liveBroadCastService.inviteLive(map);
	}

	@RequestMapping("/getLiveBroadcast")
	@ResponseBody
	public PageResponse<FbsLiveBroadcast> getLiveBroadcast(@RequestBody PageRequest<Map<String,Object>> pageRequest) {
		return liveBroadCastService.getAllHistoryBroadCast(pageRequest);
	}

	@RequestMapping("/agreeInviteOrNot")
	@ResponseBody
	public int agreeInviteOrNot(@RequestBody Map<String,Object> param){
		return liveBroadCastService.agreeInviteOrNot(param);
	}

	/**
	 * 单个直播详情，包含参与方
	 * @param id 创建的会议id
	 * @return 会议详情
	 */
	@RequestMapping("/getLiveDetail/{id}")
	@ResponseBody
	public Map<String,Object> getLiveDetail(@PathVariable final String id){
		return liveBroadCastService.getLiveDetail(new HashMap<String ,Object>(){{put("liveId",id);}});
	}
	/**
	 * 获取直播列表(参与方按钮调用)
	 * @param id
	 * @return
	 */
	@RequestMapping("/getLiveDetailTwo/{id}")
	@ResponseBody
	public Map<String,Object> getLiveDetailTwo(@PathVariable final String id){
		return liveBroadCastService.getLiveDetailTwo(new HashMap<String ,Object>(){{put("liveId",id);}});
	}
	@RequestMapping("/startLive/{id}")
	@ResponseBody
	public ServiceResponse startLive(@PathVariable final String id){
		return liveBroadCastService.startLive(id,null);
	}

    @RequestMapping("/cancelLive/{id}")
    @ResponseBody
    public Map<String,Object> cancelLive(@PathVariable String id){
		return liveBroadCastService.cancelLive(id);
	}

	@RequestMapping("/agreeOrNot")
	@ResponseBody
	public int agreeOrNot(@RequestBody Map<String,Object> param){
		return liveBroadCastService.agreeInviteOrNot(param);
	}

	@RequestMapping("/modifyBroadcast")
	@ResponseBody
	public ServiceResponse  modifyBroadcast(@RequestBody Map<String,Object> param){
		try {
		    return liveBroadCastService.modifyLiveBroadcast(param);
		} catch ( final Exception e) {
			e.printStackTrace();
		}
		return null;
	}

	@RequestMapping("/getMts/{id}")
	@ResponseBody
	public ServiceResponse getMts(@PathVariable  String id){
		 return liveBroadCastService.getMts(id);
	}


	/**
	 * 更新当前直播间的结束时间(延时)
	 * @param param
	 * @return
	 */
	@RequestMapping("/updateEndTime")
	@ResponseBody
	public String updateEndTime(@RequestBody Map<String,Object> param){
		return liveBroadCastService.updateEndTime(param);
	}

	/**
	 * 获取当前直播间结束时间
	 * @param param
	 * @return
	 */
	@RequestMapping("/searchEndTime")
	@ResponseBody
	public String searchEndTime(@RequestBody Map<String,Object> param){
		return liveBroadCastService.searchEndTime(param);
	}

	/**
	 *获取首页设置图片下拉框的值
	 * @return FbsLiveBroadcast
	 */
	@RequestMapping("/getSelectBroadcast")
	@ResponseBody
	public PageResponse<FbsLiveBroadcast> getSelectBroadcast(@RequestBody  PageRequest<FbsLiveBroadcast> request){
		return liveBroadCastService.getSelectBroadcast(request);
	}

	/**
	 *添加首页轮播图片
	 * @return int
	 */
	@RequestMapping("/addHomePicture")
	@ResponseBody
	public ModelAndView addHomePicture(HttpServletRequest request, MultipartFile picture){
		 liveBroadCastService.addHomePicture(request,picture);
		return new ModelAndView("redirect:/loginController/toHomeConfig");
	}

	/**
	 * 修改记录处理方法
	 * @param value
	 * @param valueOld
	 * @param liveId
	 * @param fixName
	 */
	public void insertMessage(String value,String valueOld,String liveId,String fixName){
		Date time = new Date();
		SimpleDateFormat formatter = new SimpleDateFormat("yyyy-MM-dd HH:mm:ss");
		String dateString = formatter.format(time);

		//直播审批修改直播名称，直播开始时间，操作记录入表
		if(!value.equals(valueOld)){
			FbsLiveMessage message = new FbsLiveMessage();
			//查询所属直播的所有已参与的参与方（）
			List<FbsLiveParticipant> participantsList =  liveParticiPantMapper.queryFbsLiveParti(Integer.parseInt(liveId));
			if("".equals(valueOld)){
				for(FbsLiveParticipant partiBean : participantsList) {
					//过滤没参加直播的参与方
					String participation = partiBean.getParticipation();
					if (participation.equals("0")||participation.equals("1")) { //已参与的
						int hospitalId = partiBean.getHospitalId();
						FbsUser userBean = ksUserMapper.getFbUserByhospitalId(hospitalId);
						int userId1 = userBean.getId();
						message.setLiveId(Integer.parseInt(liveId));
						message.setContent(fixName+"空"+"”修改为“"+value+"”");
						message.setUserId(userId1);
						message.setCreatorId("1");
						message.setMtype("1");//修改记录类型
						message.setStatus("1");
						message.setCreatedTime(time);
						liveMessageMapper.insertLiveMessage(message);
					}
				}
			}else{
				for(FbsLiveParticipant partiBean : participantsList) {
					//过滤没参加直播的参与方
					String participation = partiBean.getParticipation();
					if (participation.equals("0")||participation.equals("1")) { //已参与的
						int hospitalId = partiBean.getHospitalId();
						FbsUser userBean = ksUserMapper.getFbUserByhospitalId(hospitalId);
						int userId1 = userBean.getId();
						message.setLiveId(Integer.parseInt(liveId));
						message.setContent(fixName+valueOld+"”修改为“"+value+"”");
						message.setUserId(userId1);
						message.setCreatorId("1");
						message.setMtype("1");//修改记录类型
						message.setStatus("1");
						message.setCreatedTime(time);
						liveMessageMapper.insertLiveMessage(message);
					}
				}
			}
		}
	}

    /**
     * 更改直播参与方增加操作记录和通知消息
     * @param mapsList
     * @param mapsOld
     * @param mapParams
     */
	public void insertMessageHost(List<Map<String,Object>> mapsList,List<Map<String,Object>> mapsOld,Map<String,Object> mapParams){
        Date currentTime = new Date();
		/*SimpleDateFormat formatter = new SimpleDateFormat("yyyy-MM-dd HH:mm:ss");
		String dateString = formatter.format(currentTime);*/
        FbsLiveMessage parciticMessage = new FbsLiveMessage();
        String liveId = mapParams.get("liveId").toString();
        String liveName = mapParams.get("liveName").toString();
        String userId = mapParams.get("userId").toString();

        //当改变前后 参与方数量不一致时
        if(mapsList.size() != mapsOld.size()){
            List<String> listNew = new ArrayList<String>();
            List<String> listOld = new ArrayList<String>();
            for(Map<String,Object> map :mapsList){
                listNew.add(map.get("name").toString());
            }
            for(Map<String,Object> map :mapsOld){
                listOld.add(map.get("hospitalName").toString());
            }
            //比较参与方-双方比较
            //FbsLiveMessage parciticMessage = new FbsLiveMessage();
			String strValue = "";
			String strName = "";
			//删除参与方
			if(listNew.size() < listOld.size()){
				for (int i = 0; i < listOld.toArray().length; i++) {
					if (!listNew.contains(listOld.toArray()[i])) {
						//不包含各自参与方
						String str = listOld.toArray()[i].toString();
						strValue +=str +',';
						strName = strValue.substring(0,strValue.length()-1);
						//根据医院名称查询相应的医院id
						FbsHospitalInformation bean = hospitalInformationMapper.getHospitalIdByName(str);
						int hospitalId = bean.getId();
						//通过医院id查询相应的userId
						FbsUser user = ksUserMapper.getFbUserByhospitalId(hospitalId);
						parciticMessage.setUserId(user.getId());
						parciticMessage.setStatus("1");
						parciticMessage.setLiveId(Integer.parseInt(liveId));
						parciticMessage.setMtype("2");
						parciticMessage.setCreatorId("1");
						parciticMessage.setCreatedTime(currentTime);
						parciticMessage.setContent("“"+liveName+"”直播间移除我院请注意！");
						liveMessageMapper.insertLiveMessage(parciticMessage);

					}
				}
				//给管理员用户增加一条修改记录
				parciticMessage.setUserId(Integer.parseInt(userId));
				parciticMessage.setMtype("2");
				parciticMessage.setStatus("1");
				parciticMessage.setLiveId(Integer.parseInt(liveId));
				parciticMessage.setCreatorId("1");
				parciticMessage.setCreatedTime(currentTime);
				parciticMessage.setContent("删除参与方“"+strName+"”请管理员重新审批“"+liveName+"”");
				liveMessageMapper.insertLiveMessage(parciticMessage);
				parciticMessage.setContent("删除参与方“"+strName+"”请注意！");
				parciticMessage.setMtype("1");
				liveMessageMapper.insertLiveMessage(parciticMessage);
			}else if(listNew.size() > listOld.size()){//增加参与方
				for (int i = 0; i < listNew.toArray().length; i++) {

					if (!listOld.contains(listNew.toArray()[i])) {
						//不包含各自参与方
						String str = listNew.toArray()[i].toString();
						strValue +=str +',';
						strName = strValue.substring(0,strValue.length()-1);
						//根据医院名称查询相应的医院id
						FbsHospitalInformation bean = hospitalInformationMapper.getHospitalIdByName(str);
						int hospitalId = bean.getId();
						//通过医院id查询相应的userId
						FbsUser user = ksUserMapper.getFbUserByhospitalId(hospitalId);
						parciticMessage.setUserId(user.getId());
						parciticMessage.setStatus("1");
						parciticMessage.setLiveId(Integer.parseInt(liveId));
						parciticMessage.setMtype("2");
						parciticMessage.setCreatorId("1");
						parciticMessage.setCreatedTime(currentTime);
						parciticMessage.setContent("“"+liveName+"”直播间新增我院请注意！");
						liveMessageMapper.insertLiveMessage(parciticMessage);

					}
				}
				//给管理员用户增加一条修改记录
				parciticMessage.setUserId(Integer.parseInt(userId));
				parciticMessage.setMtype("2");
				parciticMessage.setStatus("1");
				parciticMessage.setLiveId(Integer.parseInt(liveId));
				parciticMessage.setCreatorId("1");
				parciticMessage.setCreatedTime(currentTime);
				parciticMessage.setContent("新增参与方“"+strName+"”请管理员重新审批“"+liveName+"”");
				liveMessageMapper.insertLiveMessage(parciticMessage);
				parciticMessage.setContent("新增参与方“"+strName+"”请注意！");
				parciticMessage.setMtype("1");
				liveMessageMapper.insertLiveMessage(parciticMessage);
			}

        }
        //保证是对参与者做了相应的更改操作（改变前后传过来的json格式有区别）
        String namepersonone = "";
        String namepersontwo = "";
        String nameperoneold = "";
        String namepertwoold = "";
        if(mapsList.size() != mapsOld.size()){
            for(Map<String,Object> map :mapsList){
                if(String.valueOf(map.get("serialNumber")).equals("1")){//第一主持人
                    namepersonone = map.get("name").toString();
                }else if (String.valueOf(map.get("serialNumber")).equals("2")){//第二主持人
                    namepersontwo = map.get("name").toString();
                }
            }
            for(Map<String,Object> map :mapsOld){
                if(String.valueOf(map.get("serialNumber")).equals("1")){//第一主持人
                    nameperoneold = map.get("hospitalName").toString();
                }else if (String.valueOf(map.get("serialNumber")).equals("2")){//第二主持人
                    namepertwoold = map.get("hospitalName").toString();
                }
            }
        }

            //比较改变前后的主持人变化情况
            if(namepersonone.equals(nameperoneold) && namepersontwo.equals(namepertwoold)){
                //主持人没更换
                //增加或减少参与者
                return;
            }else if(!namepersonone.equals(nameperoneold) && namepersontwo.equals(namepertwoold)){
                //更换第一主持人
                parciticMessage.setUserId(Integer.parseInt(userId));
                parciticMessage.setMtype("1");
                parciticMessage.setStatus("1");
                parciticMessage.setLiveId(Integer.parseInt(liveId));
                parciticMessage.setCreatorId("1");
                parciticMessage.setCreatedTime(currentTime);
                parciticMessage.setContent("第一主持人由“"+nameperoneold+"”切换到“"+namepersonone+"”");
                liveMessageMapper.insertLiveMessage(parciticMessage);
            }else if(namepersonone.equals(nameperoneold) && !namepersontwo.equals(namepertwoold)){
                //更换第二主持人
                parciticMessage.setUserId(Integer.parseInt(userId));
                parciticMessage.setMtype("1");
                parciticMessage.setStatus("1");
                parciticMessage.setLiveId(Integer.parseInt(liveId));
                parciticMessage.setCreatorId("1");
                parciticMessage.setCreatedTime(currentTime);
                parciticMessage.setContent("第二主持人由“"+namepertwoold+"”切换到“"+namepersontwo+"”");
                liveMessageMapper.insertLiveMessage(parciticMessage);
            }else if(!namepersonone.equals(nameperoneold) && !namepersontwo.equals(namepertwoold)){
                //第一，第二主持人都更换了
                parciticMessage.setUserId(Integer.parseInt(userId));
                parciticMessage.setMtype("1");
                parciticMessage.setStatus("1");
                parciticMessage.setLiveId(Integer.parseInt(liveId));
                parciticMessage.setCreatorId("1");
                parciticMessage.setCreatedTime(currentTime);
                parciticMessage.setContent("第一主持人由“"+nameperoneold+"”切换到“"+namepersonone+"”");
                parciticMessage.setContent("第二主持人由“"+namepertwoold+"”切换到“"+namepersontwo+"”");
                liveMessageMapper.insertLiveMessage(parciticMessage);
            }
        }

	/**
	 *  更改开始和结束时间增加修改记录和通知消息
	 * @param mapParams
	 */
	public void insertMessageTime(Map<String,Object> mapParams){
		Date currentTime = new Date();
		/*SimpleDateFormat formatter = new SimpleDateFormat("yyyy-MM-dd HH:mm:ss");
		String dateString = formatter.format(currentTime);*/
		FbsLiveMessage parciticMessage = new FbsLiveMessage();
		String liveId = mapParams.get("liveId").toString();
		String liveName = mapParams.get("liveName").toString();
		String userId = mapParams.get("userId").toString();

		String startTime = mapParams.get("startTime").toString();
		String startTimeOld = mapParams.get("startTimeOld").toString();
		String endTime = mapParams.get("endTime").toString();
		String endTimeOld = mapParams.get("endTimeOld").toString();

		if(!startTime.equals(startTimeOld) || !endTime.equals(endTimeOld)){
			logger.info("/***********************start***************************/");
			//查询所属直播的所有已参与的参与方（）
			FbsLiveMessage Bean = new FbsLiveMessage();
			List<FbsLiveParticipant> participantsList =  liveParticiPantMapper.queryFbsLiveParti(Integer.parseInt(liveId));
			for(FbsLiveParticipant partiBean : participantsList) {
				//过滤没参加直播的参与方
				String participation = partiBean.getParticipation();
				if (participation.equals("0")||participation.equals("1")) { //已参与的
					int hospitalId1 = partiBean.getHospitalId();
					FbsUser userBean = ksUserMapper.getFbUserByhospitalId(hospitalId1);
					int userId1 = userBean.getId();
					Bean.setUserId(userId1);
					Bean.setCreatorId("1");
					Bean.setMtype("2");//消息信息通知其它参与者
					Bean.setStatus("1");
					Bean.setContent("“"+liveName+"”"+"的直播时间已做更改需要管理员重新审批！");
					Bean.setLiveId(Integer.parseInt(liveId));
					Bean.setCreatedTime(currentTime);
					liveMessageMapper.insertLiveMessage(Bean);
					Bean.setContent("修改"+"“"+liveName+"”"+"直播时间需要重新审批");
					Bean.setMtype("1");
					liveMessageMapper.insertLiveMessage(Bean);
				}
			}
			//更新该直播信息审批状态(待审批让kscc管理重新审批)
			//LiveBroadApproveMapper.updateLiveApproveStatus(Integer.parseInt(liveId));
		}
	}
	@RequestMapping("/selectHomePage")
	@ResponseBody
	public ServiceResponse selectHomePage(){
		return liveBroadCastService.selectHomePage();
	}
}
