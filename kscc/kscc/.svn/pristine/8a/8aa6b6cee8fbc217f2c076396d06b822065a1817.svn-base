package com.fable.kscc.bussiness.service.livebroadcast;

import com.alibaba.fastjson.JSON;
import com.fable.kscc.api.kedaApi.KedaApi;
import com.fable.kscc.api.model.hospitalInformation.FbsHospitalInformation;
import com.fable.kscc.api.model.liveHomePage.FbsLiveHomepage;
import com.fable.kscc.api.model.livebroadcast.FbsLiveBroadcast;
import com.fable.kscc.api.model.message.FbsLiveMessage;
import com.fable.kscc.api.model.page.PageRequest;
import com.fable.kscc.api.model.page.PageResponse;
import com.fable.kscc.api.model.page.ResultKit;
import com.fable.kscc.api.model.page.ServiceResponse;
import com.fable.kscc.api.model.participant.FbsLiveParticipant;
import com.fable.kscc.api.model.user.FbsUser;
import com.fable.kscc.api.utils.DateTimeUtil;
import com.fable.kscc.api.utils.FileUtil;
import com.fable.kscc.api.utils.JsonUtil;
import com.fable.kscc.bussiness.mapper.LiveMessage.LiveMessageMapper;
import com.fable.kscc.bussiness.mapper.fbsUser.FbsUserMapper;
import com.fable.kscc.bussiness.mapper.hospitalInformation.HospitalInformationMapper;
import com.fable.kscc.bussiness.mapper.livebroadcast.LiveBroadCastMapper;
import com.fable.kscc.bussiness.mapper.livecodec.LiveCodecMapper;
import com.fable.kscc.bussiness.mapper.liveparticipant.LiveParticiPantMapper;
import com.fable.kscc.bussiness.websocket.Sender;
import com.github.pagehelper.Page;
import com.github.pagehelper.PageHelper;
import net.sf.ezmorph.bean.MorphDynaBean;
import org.codehaus.jackson.type.TypeReference;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Service;
import org.springframework.transaction.annotation.Propagation;
import org.springframework.transaction.annotation.Transactional;
import org.springframework.web.multipart.MultipartFile;

import javax.servlet.http.HttpServletRequest;
import java.text.ParseException;
import java.text.SimpleDateFormat;
import java.util.*;
import java.util.concurrent.ExecutorService;
import java.util.concurrent.Executors;

@Service
public class LiveBroadCastServiceImpl implements LiveBroadCastService {

    @Autowired
    private LiveBroadCastMapper liveBroadCastMapper;


    @Autowired
    private LiveParticiPantMapper liveParticiPantMapper;

    @Autowired
    private LiveCodecMapper liveCodecMapper;

    @Autowired
    LiveMessageMapper liveMessageMapper;

    @Autowired
    private FbsUserMapper ksUserMapper;

    @Autowired
    HospitalInformationMapper hospitalInformationMapper;

    @Autowired
    private KedaApi api;

    @Autowired
    private Sender sender;

    private SimpleDateFormat format = new SimpleDateFormat("yyyy-MM-dd HH:mm:ss");

    private ExecutorService cachedThreadPool = Executors.newCachedThreadPool();


    /**
     * 创建直播申请
     */
    @Override
    @Transactional(propagation = Propagation.REQUIRED)
    public ServiceResponse createLiveApplications(FbsLiveBroadcast broadcast) {
        broadcast.setCreatedTime(DateTimeUtil.toString(new Date()));
        liveBroadCastMapper.createLiveApplications(broadcast);
        //设置参与方
        List<FbsLiveParticipant> fbsLiveParticipants= broadcast.getParticipants();
        for (FbsLiveParticipant fbsLiveParticipant : fbsLiveParticipants) {
            String newVideoNum = liveCodecMapper.findNewVideoNum(fbsLiveParticipant.getHospitalId());//根据参与方医院id设置新世通账号
            fbsLiveParticipant.setNewvideoNum(newVideoNum);
            fbsLiveParticipant.setLiveId(broadcast.getId());//设置直播间id
            fbsLiveParticipant.setParticipation("0");
            fbsLiveParticipant.setCreatedTime(new Date());
            fbsLiveParticipant.setCreatorId(broadcast.getCreatorId());
            liveParticiPantMapper.setParticipant(fbsLiveParticipant);
        }
        return ResultKit.success();
    }


    @Override
    public ServiceResponse getLiveBroadCast(Map<String, Object> param) {
        List<FbsLiveBroadcast> fbsLiveBroadcasts = liveBroadCastMapper.getLiveBroadCast(param);
        List<FbsLiveBroadcast> inviteLives = liveBroadCastMapper.inviteLive(param);
        fbsLiveBroadcasts.addAll(inviteLives);
        return ResultKit.serviceResponse(fbsLiveBroadcasts);
    }

    @Override
    public ServiceResponse applyBroadCast(Map<String, Object> param) {
        List<FbsLiveBroadcast> fbsLiveBroadcasts = liveBroadCastMapper.getLiveBroadCast(param);
        return ResultKit.serviceResponse(fbsLiveBroadcasts);
    }

    @Override
    public ServiceResponse selectHomePage() {
        List<FbsLiveHomepage> fbsLiveHomepages = liveBroadCastMapper.selectHomePage();
        return ResultKit.serviceResponse(fbsLiveHomepages);
    }

    @Override
    public ServiceResponse inviteLive(Map<String, Object> param) {
        List<FbsLiveBroadcast> broadcasts = liveBroadCastMapper.inviteLive(param);
        return ResultKit.serviceResponse(broadcasts);
    }

    @Override
    public PageResponse<FbsLiveBroadcast> getAllHistoryBroadCast(PageRequest<Map<String, Object>> pageRequest) {
        //map里有userId，participation，status（1、我参与的，2、我申请的，3、我受邀的）三个参数
        Map<String, Object> map = pageRequest.getParam();
        String status = map.get("status").toString();
        List<FbsLiveBroadcast> liveBroadcasts = new ArrayList<>();
        String liveType;
        //我参与的直播( 我申请的，和我受邀的直播并且是会议status为2的，已经结束的直播)
        if ("1".equals(status)) {
            map.put("playStatus", "2");
            liveType = "我参与的直播";
            map.put("doNotParticipant", "2");
            List<FbsLiveBroadcast> inviteLives = liveBroadCastMapper.inviteLive(map);
            List<FbsLiveBroadcast> fbsLiveBroadcastOfMine = liveBroadCastMapper.getLiveBroadCast(map);
            inviteLives.addAll(fbsLiveBroadcastOfMine);
            filterHistory(inviteLives, liveBroadcasts, liveType);
        }
        //我申请的直播（管他妈的有没有同意，有没有被取消）
        else if ("2".equals(status)) {
            liveType = "我申请的直播";
            List<FbsLiveBroadcast> fbsLiveBroadcastOfMine = liveBroadCastMapper.getLiveBroadCast(map);
            filterHistory(fbsLiveBroadcastOfMine, liveBroadcasts, liveType);
        } else {
            liveType = "我受邀的直播";
            map.put("approvalStatus", "1");
            List<FbsLiveBroadcast> inviteLives = liveBroadCastMapper.inviteLive(map);
            filterHistory(inviteLives, liveBroadcasts, liveType);
        }
        return PageResponse.wrap(liveBroadcasts, pageRequest.getPageNo(), pageRequest.getPageSize());
    }

    @Override
    @Transactional
    public int agreeInviteOrNot(Map<String, Object> map) {
        //web端传的参数：{participant:'2',userId:loginUserId,liveId:disagreeId}
        if ("2".equals(map.get("participant").toString())) {
            int count = liveBroadCastMapper.getParticipantsNum(map);
            if (count == 0) {
                int countUndefined = liveBroadCastMapper.getUndefinedParticipantsNum(map);
                if(countUndefined==1){
                    String id = map.get("liveId").toString();
                    liveBroadCastMapper.cancelLive(id);
                }
            }
        }
        return liveBroadCastMapper.updateLiveParticipant(map);
    }

    @Override
    public Map<String, Object> getLiveDetail(Map<String, Object> param) {
        List<Map<String, Object>> participants = liveBroadCastMapper.queryParticipant(param);
        Map<String, Object> liveBroadCast = liveBroadCastMapper.queryLiveById(param);
        liveBroadCast.put("participants", participants);
        return liveBroadCast;
    }

    @Override
    public Map<String, Object> getLiveDetailTwo(Map<String, Object> param) {
        List<Map<String, Object>> participants = liveBroadCastMapper.queryParticipant(param);
        Map<String, Object> liveBroadCast = liveBroadCastMapper.queryLiveById(param);
        String confId = liveBroadCast.get("confId").toString();
        Map<String, Object> meetingInfo = api.getMeetingInfo(confId);
        if ("1".equals(meetingInfo.get("success").toString())) {
            liveBroadCast.put("silence", meetingInfo.get("silence"));
            liveBroadCast.put("mute", meetingInfo.get("mute"));
        }
        Map<String, Object> responseForMts = api.getMTS(confId);
        if ("1".equals(responseForMts.get("success").toString())) {
            List<MorphDynaBean> mts = (List<MorphDynaBean>) responseForMts.get("mts");
            if (mts.size() != 0) {
                for (Map<String, Object> map : participants) {
                    for (MorphDynaBean bean : mts) {
                        if (bean.get("mt_id").equals(map.get("mtId"))) {
                            map.put("confId", confId);
                            map.put("silence", bean.get("silence"));
                            map.put("mute", bean.get("mute"));
                            break;
                        }
                    }
                }
            }
        }
        liveBroadCast.put("participants", participants);
        return liveBroadCast;
    }


    @Override
    @Transactional
    public ServiceResponse modifyLiveBroadcast(Map<String, Object> param) throws Exception {

        //首先判断参与方有没有改变（数量，参与方名称），开始时间和结束时间有没有改变
        //改变的话，就需要重新审核

        List<Map<String, Object>> oldParticipant = (List<Map<String, Object>>) param.get("oldParticipant");
        Map<String, Object> oldLive = (Map<String, Object>) param.get("oldLive");

        List<Map<String, Object>> newParticipant = (List<Map<String, Object>>) param.get("newParticipant");
        Map<String, Object> newLive = (Map<String, Object>) param.get("newLive");
        newLive.put("updateTime", format.format(new Date()));

        //修改直播基本信息时
        String liveId = oldLive.get("id").toString();

        String liveName = newLive.get("liveName").toString();
        String liveNameOld = oldLive.get("title").toString();
        insertMessage(liveName,liveNameOld,liveId,"直播名称由“");
        String mobilePhone = newLive.get("mobilePhone").toString();
        String mobilePhoneOld = oldLive.get("mobilePhone").toString();
        insertMessage(mobilePhone,mobilePhoneOld,liveId,"移动电话由“");
        String telephone = newLive.get("telephone") == null ? "": newLive.get("telephone").toString();
        String telePhoneOld = oldLive.get("telephone") == null ? "": oldLive.get("telephone").toString();
        insertMessage(telephone,telePhoneOld,liveId,"固定电话由“");
        String email = newLive.get("email") == null ? "": newLive.get("email").toString();
        String emailOld = oldLive.get("email") == null ? "": oldLive.get("email").toString();
        insertMessage(email,emailOld,liveId,"联系邮箱由“");
        String hospitalURL = newLive.get("hospitalURL") == null ? "": newLive.get("hospitalURL").toString();
        String hospitalWebsiteOld = oldLive.get("hospitalURL") == null ? "": oldLive.get("hospitalURL").toString();
        insertMessage(hospitalURL,hospitalWebsiteOld,liveId,"医院网址由“");
        String liveIntroduction = newLive.get("liveIntroduction") == null ? "": newLive.get("liveIntroduction").toString();
        String liveIntroductionOld = oldLive.get("liveIntroduction") == null ? "": oldLive.get("liveIntroduction").toString();
        insertMessage(liveIntroduction,liveIntroductionOld,liveId,"医院简介由“");

        //当直播开始时间和结束时间改变时
        String userId = oldLive.get("userId").toString();
        String startTime = newLive.get("startTime").toString();
        String startTimeOld = oldLive.get("startTime").toString();
        if(startTime.length() != startTimeOld.length()){
            startTimeOld = startTimeOld.substring(0, startTimeOld.length() - 5);
        }
        String endTime = newLive.get("endTime").toString();
        String endTimeOld = oldLive.get("endTime").toString();
        if(endTime.length() != endTimeOld.length()){
            endTimeOld = endTimeOld.substring(0, endTimeOld.length() - 5);
        }
        Map<String,Object> mapParams = new HashMap<String,Object>();
        mapParams.put("liveId",liveId);
        mapParams.put("liveName",liveName);
        mapParams.put("userId",userId);
        mapParams.put("startTime",startTime);
        mapParams.put("startTimeOld",startTimeOld);
        mapParams.put("endTime",endTime);
        mapParams.put("endTimeOld",endTimeOld);

        //json字符创转化为List<map>
        if(newParticipant.get(0).containsKey("name") && oldParticipant.get(0).containsKey("hospitalName")){
            //调用操作记录方法
            insertMessageHost(newParticipant,oldParticipant,mapParams);
        }
        //调用操作记录方法
        if(!startTime.equals(startTimeOld) || !endTime.equals(endTimeOld)){
            insertMessageTime(mapParams);
        }

        //时间变动或者参与人变动
        if (!isSameParticipant(oldParticipant, newParticipant) || !isSameTime(oldLive, newLive)) {
            liveBroadCastMapper.deletePaticipant(newLive);
            for (Map<String, Object> map : newParticipant) {
                int hospitalId;
                if (map.get("hospitalId") == null) {
                    hospitalId = Integer.parseInt(map.get("id").toString());
                } else {
                    hospitalId = Integer.parseInt(map.get("hospitalId").toString());
                }
                map.remove("id");
                String newVideoNum = liveCodecMapper.findNewVideoNum(hospitalId);
                map.put("liveId", newLive.get("liveId").toString());
                map.put("newvideoNum", newVideoNum);
                map.put("hospitalId", hospitalId);
                Object serialNumber = map.get("serialNumber");
                if (serialNumber != null && "1".equals(serialNumber.toString())) {
                    map.put("isHost", "1");
                } else {
                    map.put("isHost", "2");
                }
                liveBroadCastMapper.insertParticipant(map);
            }
            newLive.put("approvalStatus", "0");//重新审批
        }
        //二者都没变动
        else {
            liveBroadCastMapper.clearHost(newLive);
            for (Map<String, Object> map : newParticipant) {
                if (map.get("hospitalId") == null) {
                    map.put("hospitalId", map.get("id"));
                }
                Object serialNumber = map.get("serialNumber");
                if (serialNumber != null && "1".equals(serialNumber.toString())) {
                    map.put("isHost", "1");
                } else {
                    map.put("isHost", "2");
                }
                map.put("liveId", newLive.get("liveId"));
                liveBroadCastMapper.updateParticipant(map);
            }
        }
        liveBroadCastMapper.modifyLive(newLive);
        return ResultKit.success();
    }


    /**
     * 修改记录处理方法
     * @param value
     * @param valueOld
     * @param liveId
     * @param fixName
     */
    public void insertMessage(String value,String valueOld,String liveId,String fixName){
        Date time = new Date();
        SimpleDateFormat formatter = new SimpleDateFormat("yyyy-MM-dd HH:mm:ss");
        String dateString = formatter.format(time);

        //直播审批修改直播名称，直播开始时间，操作记录入表
        if(!value.equals(valueOld)){
            FbsLiveMessage message = new FbsLiveMessage();
            //查询所属直播的所有已参与的参与方（）
            List<FbsLiveParticipant> participantsList =  liveParticiPantMapper.queryFbsLiveParti(Integer.parseInt(liveId));
            if("".equals(valueOld)){
                for(FbsLiveParticipant partiBean : participantsList) {
                    //过滤没参加直播的参与方
                    String participation = partiBean.getParticipation();
                    if (participation.equals("0")||participation.equals("1")) { //已参与的
                        int hospitalId = partiBean.getHospitalId();
                        FbsUser userBean = ksUserMapper.getFbUserByhospitalId(hospitalId);
                        int userId1 = userBean.getId();
                        message.setLiveId(Integer.parseInt(liveId));
                        message.setContent(fixName+"空"+"”修改为“"+value+"”");
                        message.setUserId(userId1);
                        message.setCreatorId("1");
                        message.setMtype("1");//修改记录类型
                        message.setStatus("1");
                        message.setCreatedTime(time);
                        liveMessageMapper.insertLiveMessage(message);
                    }
                }
            }else{
                for(FbsLiveParticipant partiBean : participantsList) {
                    //过滤没参加直播的参与方
                    String participation = partiBean.getParticipation();
                    if (participation.equals("0")||participation.equals("1")) { //已参与的
                        int hospitalId = partiBean.getHospitalId();
                        FbsUser userBean = ksUserMapper.getFbUserByhospitalId(hospitalId);
                        int userId1 = userBean.getId();
                        message.setLiveId(Integer.parseInt(liveId));
                        message.setContent(fixName+valueOld+"”修改为“"+value+"”");
                        message.setUserId(userId1);
                        message.setCreatorId("1");
                        message.setMtype("1");//修改记录类型
                        message.setStatus("1");
                        message.setCreatedTime(time);
                        liveMessageMapper.insertLiveMessage(message);
                    }
                }
            }
        }
    }

    /**
     * 更改直播参与方增加操作记录和通知消息
     * @param mapsList
     * @param mapsOld
     * @param mapParams
     */
    public void insertMessageHost(List<Map<String,Object>> mapsList,List<Map<String,Object>> mapsOld,Map<String,Object> mapParams){
        Date currentTime = new Date();
		/*SimpleDateFormat formatter = new SimpleDateFormat("yyyy-MM-dd HH:mm:ss");
		String dateString = formatter.format(currentTime);*/
        FbsLiveMessage parciticMessage = new FbsLiveMessage();
        String liveId = mapParams.get("liveId").toString();
        String liveName = mapParams.get("liveName").toString();
        String userId = mapParams.get("userId").toString();

        //当改变前后 参与方数量不一致时
        if(mapsList.size() != mapsOld.size()){
            List<String> listNew = new ArrayList<String>();
            List<String> listOld = new ArrayList<String>();
            for(Map<String,Object> map :mapsList){
                listNew.add(map.get("name").toString());
            }
            for(Map<String,Object> map :mapsOld){
                listOld.add(map.get("hospitalName").toString());
            }
            //比较参与方-双方比较
            //FbsLiveMessage parciticMessage = new FbsLiveMessage();
            String strValue = "";
            String strName = "";
            //删除参与方
            if(listNew.size() < listOld.size()){
                for (int i = 0; i < listOld.toArray().length; i++) {
                    if (!listNew.contains(listOld.toArray()[i])) {
                        //不包含各自参与方
                        String str = listOld.toArray()[i].toString();
                        strValue +=str +',';
                        strName = strValue.substring(0,strValue.length()-1);
                        //根据医院名称查询相应的医院id
                        FbsHospitalInformation bean = hospitalInformationMapper.getHospitalIdByName(str);
                        int hospitalId = bean.getId();
                        //通过医院id查询相应的userId
                        FbsUser user = ksUserMapper.getFbUserByhospitalId(hospitalId);
                        parciticMessage.setUserId(user.getId());
                        parciticMessage.setStatus("1");
                        parciticMessage.setLiveId(Integer.parseInt(liveId));
                        parciticMessage.setMtype("2");
                        parciticMessage.setCreatorId("1");
                        parciticMessage.setCreatedTime(currentTime);
                        parciticMessage.setContent("“"+liveName+"”直播间移除我院请注意！");
                        liveMessageMapper.insertLiveMessage(parciticMessage);

                    }
                }
                //给管理员用户增加一条修改记录
                parciticMessage.setUserId(Integer.parseInt(userId));
                parciticMessage.setMtype("2");
                parciticMessage.setStatus("1");
                parciticMessage.setLiveId(Integer.parseInt(liveId));
                parciticMessage.setCreatorId("1");
                parciticMessage.setCreatedTime(currentTime);
                parciticMessage.setContent("删除参与方“"+strName+"”请管理员重新审批“"+liveName+"”");
                liveMessageMapper.insertLiveMessage(parciticMessage);
                parciticMessage.setContent("删除参与方“"+strName+"”请注意！");
                parciticMessage.setMtype("1");
                liveMessageMapper.insertLiveMessage(parciticMessage);
            }else if(listNew.size() > listOld.size()){//增加参与方
                for (int i = 0; i < listNew.toArray().length; i++) {

                    if (!listOld.contains(listNew.toArray()[i])) {
                        //不包含各自参与方
                        String str = listNew.toArray()[i].toString();
                        strValue +=str +',';
                        strName = strValue.substring(0,strValue.length()-1);
                        //根据医院名称查询相应的医院id
                        FbsHospitalInformation bean = hospitalInformationMapper.getHospitalIdByName(str);
                        int hospitalId = bean.getId();
                        //通过医院id查询相应的userId
                        FbsUser user = ksUserMapper.getFbUserByhospitalId(hospitalId);
                        parciticMessage.setUserId(user.getId());
                        parciticMessage.setStatus("1");
                        parciticMessage.setLiveId(Integer.parseInt(liveId));
                        parciticMessage.setMtype("2");
                        parciticMessage.setCreatorId("1");
                        parciticMessage.setCreatedTime(currentTime);
                        parciticMessage.setContent("“"+liveName+"”直播间新增我院请注意！");
                        liveMessageMapper.insertLiveMessage(parciticMessage);

                    }
                }
                //给管理员用户增加一条修改记录
                parciticMessage.setUserId(Integer.parseInt(userId));
                parciticMessage.setMtype("2");
                parciticMessage.setStatus("1");
                parciticMessage.setLiveId(Integer.parseInt(liveId));
                parciticMessage.setCreatorId("1");
                parciticMessage.setCreatedTime(currentTime);
                parciticMessage.setContent("新增参与方“"+strName+"”请管理员重新审批“"+liveName+"”");
                liveMessageMapper.insertLiveMessage(parciticMessage);
                parciticMessage.setContent("新增参与方“"+strName+"”请注意！");
                parciticMessage.setMtype("1");
                liveMessageMapper.insertLiveMessage(parciticMessage);
            }

        }
        //保证是对参与者做了相应的更改操作（改变前后传过来的json格式有区别）
        String namepersonone = "";
        String namepersontwo = "";
        String nameperoneold = "";
        String namepertwoold = "";
        if(mapsList.size() != mapsOld.size()){
            for(Map<String,Object> map :mapsList){
                if(String.valueOf(map.get("serialNumber")).equals("1")){//第一主持人
                    namepersonone = map.get("name").toString();
                }else if (String.valueOf(map.get("serialNumber")).equals("2")){//第二主持人
                    namepersontwo = map.get("name").toString();
                }
            }
            for(Map<String,Object> map :mapsOld){
                if(String.valueOf(map.get("serialNumber")).equals("1")){//第一主持人
                    nameperoneold = map.get("hospitalName").toString();
                }else if (String.valueOf(map.get("serialNumber")).equals("2")){//第二主持人
                    namepertwoold = map.get("hospitalName").toString();
                }
            }
        }

        //比较改变前后的主持人变化情况
        if(namepersonone.equals(nameperoneold) && namepersontwo.equals(namepertwoold)){
            //主持人没更换
            //增加或减少参与者
            return;
        }else if(!namepersonone.equals(nameperoneold) && namepersontwo.equals(namepertwoold)){
            //更换第一主持人
            parciticMessage.setUserId(Integer.parseInt(userId));
            parciticMessage.setMtype("1");
            parciticMessage.setStatus("1");
            parciticMessage.setLiveId(Integer.parseInt(liveId));
            parciticMessage.setCreatorId("1");
            parciticMessage.setCreatedTime(currentTime);
            parciticMessage.setContent("第一主持人由“"+nameperoneold+"”切换到“"+namepersonone+"”");
            liveMessageMapper.insertLiveMessage(parciticMessage);
        }else if(namepersonone.equals(nameperoneold) && !namepersontwo.equals(namepertwoold)){
            //更换第二主持人
            parciticMessage.setUserId(Integer.parseInt(userId));
            parciticMessage.setMtype("1");
            parciticMessage.setStatus("1");
            parciticMessage.setLiveId(Integer.parseInt(liveId));
            parciticMessage.setCreatorId("1");
            parciticMessage.setCreatedTime(currentTime);
            parciticMessage.setContent("第二主持人由“"+namepertwoold+"”切换到“"+namepersontwo+"”");
            liveMessageMapper.insertLiveMessage(parciticMessage);
        }else if(!namepersonone.equals(nameperoneold) && !namepersontwo.equals(namepertwoold)){
            //第一，第二主持人都更换了
            parciticMessage.setUserId(Integer.parseInt(userId));
            parciticMessage.setMtype("1");
            parciticMessage.setStatus("1");
            parciticMessage.setLiveId(Integer.parseInt(liveId));
            parciticMessage.setCreatorId("1");
            parciticMessage.setCreatedTime(currentTime);
            parciticMessage.setContent("第一主持人由“"+nameperoneold+"”切换到“"+namepersonone+"”");
            parciticMessage.setContent("第二主持人由“"+namepertwoold+"”切换到“"+namepersontwo+"”");
            liveMessageMapper.insertLiveMessage(parciticMessage);
        }
    }

    /**
     *  更改开始和结束时间增加修改记录和通知消息
     * @param mapParams
     */
    public void insertMessageTime(Map<String,Object> mapParams){
        Date currentTime = new Date();
		/*SimpleDateFormat formatter = new SimpleDateFormat("yyyy-MM-dd HH:mm:ss");
		String dateString = formatter.format(currentTime);*/
        FbsLiveMessage parciticMessage = new FbsLiveMessage();
        String liveId = mapParams.get("liveId").toString();
        String liveName = mapParams.get("liveName").toString();
        String userId = mapParams.get("userId").toString();

        String startTime = mapParams.get("startTime").toString();
        String startTimeOld = mapParams.get("startTimeOld").toString();
        String endTime = mapParams.get("endTime").toString();
        String endTimeOld = mapParams.get("endTimeOld").toString();

        if(!startTime.equals(startTimeOld) || !endTime.equals(endTimeOld)){
            //查询所属直播的所有已参与的参与方（）
            FbsLiveMessage Bean = new FbsLiveMessage();
            List<FbsLiveParticipant> participantsList =  liveParticiPantMapper.queryFbsLiveParti(Integer.parseInt(liveId));
            for(FbsLiveParticipant partiBean : participantsList) {
                //过滤没参加直播的参与方
                String participation = partiBean.getParticipation();
                if (participation.equals("0")||participation.equals("1")) { //已参与的
                    int hospitalId1 = partiBean.getHospitalId();
                    FbsUser userBean = ksUserMapper.getFbUserByhospitalId(hospitalId1);
                    int userId1 = userBean.getId();
                    Bean.setUserId(userId1);
                    Bean.setCreatorId("1");
                    Bean.setMtype("2");//消息信息通知其它参与者
                    Bean.setStatus("1");
                    Bean.setContent("“"+liveName+"”"+"的直播时间已做更改需要管理员重新审批！");
                    Bean.setLiveId(Integer.parseInt(liveId));
                    Bean.setCreatedTime(currentTime);
                    liveMessageMapper.insertLiveMessage(Bean);
                    Bean.setContent("修改"+"“"+liveName+"”"+"直播时间需要重新审批");
                    Bean.setMtype("1");
                    liveMessageMapper.insertLiveMessage(Bean);
                }
            }
            //更新该直播信息审批状态(待审批让kscc管理重新审批)
            //LiveBroadApproveMapper.updateLiveApproveStatus(Integer.parseInt(liveId));
        }
    }

    @Override
    public ServiceResponse startLive(final String liveId, Date date) {
        //分为手动开始直播，和自动开始直播
        //手动开始直播，需要记录开始时间，结合创建的直播的结束时间(endTime)得到会议时长
        //自动开始直播，根据创建会议的startTime字段得到会议开始时间，结合endTime得出会议时长
        Map<String, Object> param = getLiveDetail(new HashMap<String, Object>() {{
            put("liveId", liveId);
        }});
        long duration;
        //自动开始
        if (date != null) {
            duration = (((Date) param.get("endTime")).getTime() - date.getTime()) / 1000 / 60;
        }
        //手动开始
        else {
            duration = (((Date) param.get("endTime")).getTime() - (new Date()).getTime()) / 1000 / 60;
        }
        String confName = param.get("title").toString();
        List<Map<String, Object>> invites = (List<Map<String, Object>>) param.get("participants");
        List<String> mtE164s = new ArrayList<>();
        for (Map<String, Object> map : invites) {
            mtE164s.add(map.get("newvideoNum").toString());
        }
        String jsonParam = api.generateConfParam(confName, mtE164s, duration);
        Map<String, Object> response = api.createConf(jsonParam);
        String confId;
        if ("1".equals(response.get("success").toString())) {
            confId = response.get("conf_id").toString();
            String startTime = format.format(new Date());
            liveBroadCastMapper.startLive(param.get("id").toString(), confId, startTime);
            return ResultKit.success();
        }
        return ResultKit.fail("开始会议失败");
    }


    /**
     * 线程执行不断获取参与方的在线与否
     *
     * @param confId
     */
    public void getTerminalStatus(final String confId) {
        final Map<Object, Object> statusMap = new HashMap<>();
        final Map<String, Object> mtsStatus = new HashMap<>();
        cachedThreadPool.execute(new Runnable() {
            @Override
            public void run() {
                boolean flag = true;
                while (flag) {
                    try {
                        Thread.sleep(5000);
                        Map<String, Object> responseForMts = api.getMTS(confId);
                        if (responseForMts.get("success") == null) {
                            System.out.println(responseForMts);
                        }
                        if ("1".equals(responseForMts.get("success").toString())) {
                            List<MorphDynaBean> mts = (List<MorphDynaBean>) responseForMts.get("mts");
                            for (MorphDynaBean mt : mts) {
                                statusMap.put(mt.get("mt_id"), mt.get("online"));
                            }
                            mtsStatus.put("mtsStatus", statusMap);
                            String status = JSON.toJSONString(mtsStatus);
                            sender.sendData(status);
                            if (sender.getSessions().size() == 0) {
                                flag = false;
                            }
                        }
                    } catch (InterruptedException e) {
                        // TODO Auto-generated catch block
                        e.printStackTrace();
                    }
                }
            }
        });
    }

    @Override
    public Map<String, Object> cancelLive(String param) {
        final int status = liveBroadCastMapper.cancelLive(param);
        return new HashMap<String, Object>() {{
            put("status", status);
        }};
    }

    @Override
    public ServiceResponse getMts(final String liveId) {
        Map<String, Object> param = getLiveDetail(new HashMap<String, Object>() {{
            put("liveId", liveId);
        }});
        List<Map<String, Object>> invites = (List<Map<String, Object>>) param.get("participants");
        String confId = param.get("confId").toString();
        if (invites.get(0).get("mtId") != null) {
            getTerminalStatus(confId);
            return ResultKit.success();
        }
        Map<String, Object> responseForMts = api.getMTS(confId);
        if ("1".equals(responseForMts.get("success").toString())) {
            List<MorphDynaBean> mts = (List<MorphDynaBean>) responseForMts.get("mts");
            if (mts.size() != 0) {
                for (Map<String, Object> map : invites) {
                    for (MorphDynaBean mt : mts) {
                        if (map.get("newvideoNum").toString().equals(mt.get("e164").toString())) {
                            map.put("mtId", mt.get("mt_id"));
                            map.put("updateTime", format.format(new Date()));
                            liveBroadCastMapper.updateParticipantMtsById(map);
                            break;
                        }
                    }
                }
                getTerminalStatus(confId);
                return ResultKit.success();
            }
            return ResultKit.fail("无参与方");
        }
        return ResultKit.fail("调用获取终端列表失败");
    }

    private boolean isSameParticipant(List<Map<String, Object>> oldOne, List<Map<String, Object>> newOne) {
        List<String> oldHospitalId = new ArrayList<>();
        List<String> newHospitalId = new ArrayList<>();
        for (Map<String, Object> map : oldOne) {
            oldHospitalId.add(map.get("hospitalId").toString());
        }
        for (Map<String, Object> map : newOne) {
            if (map.get("hospitalId") == null) {
                newHospitalId.add(map.get("id").toString());
            } else {
                newHospitalId.add(map.get("hospitalId").toString());
            }
        }
        return oldHospitalId.containsAll(newHospitalId) && newHospitalId.containsAll(oldHospitalId);
    }

    private boolean isSameTime(Map<String, Object> oldLive, Map<String, Object> newLive) {
        String oldStartTime = oldLive.get("startTime").toString().substring(0, 16);
        String oldEndTime = oldLive.get("endTime").toString().substring(0, 16);
        String newStartTime = newLive.get("startTime").toString();
        String newEndTime = newLive.get("endTime").toString();
        return oldEndTime.equals(newEndTime) && oldStartTime.equals(newStartTime);
    }

    private void filterHistory(List<FbsLiveBroadcast> broadcasts, List<FbsLiveBroadcast> container, String liveTye) {
        for (FbsLiveBroadcast broadcast : broadcasts) {
            //结束的会议
//			if("2".equals(broadcast.getPlayStatus())){
            broadcast.setLiveType(liveTye);
            container.add(broadcast);
//			}
        }
    }


    //获取当前直播间结束时间
    public String searchEndTime(Map<String, Object> param) {
        return liveBroadCastMapper.searchEndTime(Integer.parseInt(String.valueOf(param.get("liveId"))));
    }


    //更新当前直播间的结束时间(延时)
    @Override
    public String updateEndTime(Map<String, Object> param) {//liveId 延长时间 timeExpand
        SimpleDateFormat sdf = new SimpleDateFormat("yyyy-MM-dd HH:mm:ss");
        String endTime = "";
        //获取原结束时间
        String oldEndTime = liveBroadCastMapper.searchEndTime(Integer.parseInt(String.valueOf(param.get("liveId"))));
        //获取需要延长的时间
        int time = Integer.parseInt(String.valueOf(param.get("timeExpand")));
        try {
            long millionSeconds = sdf.parse(oldEndTime).getTime() + time * 1000 * 60;//毫秒
            Date date = new Date(millionSeconds);
            SimpleDateFormat dateFormat = new SimpleDateFormat("yyyy-MM-dd HH:mm");
            endTime = dateFormat.format(date).toString();
        } catch (ParseException e) {
            // TODO Auto-generated catch block
            e.printStackTrace();
        }
        Map<String, Object> map = new HashMap<>();
        map.put("endTime", endTime);
        map.put("liveId", Integer.parseInt(String.valueOf(param.get("liveId"))));
        liveBroadCastMapper.updateEndTime(map);
        return endTime;
    }

    @Override
    public PageResponse<FbsLiveBroadcast> getSelectBroadcast(PageRequest<FbsLiveBroadcast> pageRequest) {
        Page<FbsLiveBroadcast> result = PageHelper.startPage(pageRequest.getPageNo(), pageRequest.getPageSize());
        liveBroadCastMapper.selectAllBroadcast();
        return PageResponse.wrap(result);
    }

    @Override
    @Transactional
    public ServiceResponse addHomePicture(FbsLiveHomepage homepage) {

        int count = liveBroadCastMapper.countHomePictureByLiveId(homepage.getLiveId());
        if (count > 0) {
            liveBroadCastMapper.deleteHomePictureByLiveId(homepage.getLiveId());
        }
        liveBroadCastMapper.insertIntoHomePage(homepage);
        return ResultKit.success();
    }

    @Override
    public FbsLiveBroadcast searchBroadcastInfoByLiveId(Map<String, Object> map) {
        return liveBroadCastMapper.searchBroadcastInfoByLiveId(map);
    }


}
