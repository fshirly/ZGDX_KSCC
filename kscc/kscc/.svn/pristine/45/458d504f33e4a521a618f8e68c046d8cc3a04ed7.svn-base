package com.fable.kscc.api.utils;

import org.apache.commons.codec.binary.Base64;
import org.apache.commons.codec.digest.DigestUtils;
import org.dom4j.Document;
import org.dom4j.DocumentHelper;
import org.dom4j.Element;

import java.io.UnsupportedEncodingException;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

/**
 * Created by Wanghairui on 2017/10/10.
 */
public class XmlGenerator {

    private static Map<String, Element> rootRequestMap = new HashMap<>();

    public static void main(String[] args) throws Exception {
        Map<String, String> login = new HashMap<>();
        login.put("ip", "123");
        login.put("username", "admin");
        login.put("password", "admin123");
        login.put("hospitalId", "1");
        login.put("authenticationid", "asgf5");
        generateRequestRoot(login);

        System.out.println(generateMp4FileQueryParam(login.get("hospitalId") + login.get("ip")));
    }

    public static String generateLoginParam(String key) {

        Element root = rootRequestMap.get(key);
        removeRedundantElement(root);
        Element loginReq = root.addElement("LoginReq");
        loginReq.setText("");
        return root.asXML();
    }

    public static String generateKeepHeartBeatParam(String key) {
        Element root = rootRequestMap.get(key);
        removeRedundantElement(root);
        //        <StateReq>
        //	<Chn></Chn>						<!--xs:boolean	是否查询通道相关变化(当节点不存在相当于取值为FALSE)-->
        //	<Group></Group>					<!--xs:boolean	是否查询通道分组相关变化(当节点不存在相当于取值为FALSE)-->
        //	<CfgMod></CfgMod>				<!--xs:boolean	是否查询配置变更-->
        //	<RecentLog>						<!--该节点存在表示要查询实时日志个数-->
        //		<TimeStamp></TimeStamp>		<!--xs:integer	查询"实时日志"的起始时间戳(登录后，第一次查询需要传入0)-->
        //		<LogParam></LogParam>		<!--xs:string	查询的日志类别,多项以逗号隔开(可选值: UserOp:用户操作日志 SysExp:系统异常日志 NvrAlm:NVR告警日志
        //        DevAlm:设备告警日志 ImpNtf:重要通知日志 值为空:表示全部类型)-->
        //	</RecentLog>
        //	<SysStatus></SysStatus>			<!--xs:boolean	是否查询系统实时状态-->
        //	<DiskChg></DiskChg>				<!--xs:boolean	是否查询磁盘插拔状态-->
        //</StateReq>
        Element StateReq = root.addElement("StateReq");
        Element CfgMod = StateReq.addElement("CfgMod");
        Element SysStatus = StateReq.addElement("SysStatus");
        Element DiskChg = StateReq.addElement("DiskChg");
        CfgMod.setText("TRUE");
        SysStatus.setText("TRUE");
        DiskChg.setText("TRUE");
        return root.asXML();
    }

    public static String generateHaveNotParam(String key) {
        Element root = rootRequestMap.get(key);
        removeRedundantElement(root);
        return root.asXML();
    }

    public static void generateRequestRoot(Map<String,String> login) {
        Document doc = DocumentHelper.createDocument();
        Element contentroot = doc.addElement("contentroot");
        //增加子元素
        Element authenticationinfoNode = contentroot.addElement("authenticationinfo");
        authenticationinfoNode.addAttribute("type", "7.0");

        Element usernameNode = authenticationinfoNode.addElement("username");
        Element passwordNode = authenticationinfoNode.addElement("password");
        Element authenticationidNode = authenticationinfoNode.addElement("authenticationid");
        usernameNode.setText(login.get("username"));
        passwordNode.setText(encode(login));
        authenticationidNode.setText(login.get("authenticationid"));
        rootRequestMap.put(login.get("hospitalId")+login.get("ip"), contentroot);
    }

    //自己看自己不经过新世通平台参数
    public static String generateSetVmtParam(String key){

        Element root = rootRequestMap.get(key);
        removeRedundantElement(root);
        Element SetVmtParamReq = root.addElement("SetVmtParamReq");
        Element DviOutPortList = SetVmtParamReq.addElement("DviOutPortList");
        DviOutPortList.addAttribute("num", "4");

        Element DviOutPort = DviOutPortList.addElement("DviOutPort");
        DviOutPort.addAttribute("id", "0");
        Element SrcChnID = DviOutPort.addElement("SrcChnID");
        SrcChnID.setText("3");

        Element DviOutPort1 = DviOutPortList.addElement("DviOutPort");
        DviOutPort1.addAttribute("id", "1");
        Element SrcChnID1 = DviOutPort1.addElement("SrcChnID");
        SrcChnID1.setText("9");

        Element DviOutPort2 = DviOutPortList.addElement("DviOutPort");
        DviOutPort2.addAttribute("id", "2");
        Element SrcChnID2 = DviOutPort2.addElement("SrcChnID");
        SrcChnID2.setText("9");

        Element DviOutPort3 = DviOutPortList.addElement("DviOutPort");
        DviOutPort3.addAttribute("id", "3");
        Element SrcChnID3 = DviOutPort3.addElement("SrcChnID");
        SrcChnID3.setText("6");
        return root.asXML();
    }

    public static  String generateMp4FileQueryParam(String key){
        Element root = rootRequestMap.get(key);
        removeRedundantElement(root);
        //        <!--功能: 录像MP4文件所在目录搜索-->
        //<!--URL: /nvrcgi2/svrmp4/Mp4FileQuery-->
        //<!--所需权限: SysPower_Chn, ChnPower_None-->
        //<!--Request:-->
        //<MedtMp4QueryReq>
        //	<Type></Type>							<!--xs:byte 填1-->
        //	<StartTime></StartTime>					<!--xs:uint64 会议开始时间-->
        //	<EndTime></EndTime>						<!--xs:uint64 会议结束时间-->
        //	<CatalogPath></CatalogPath>				<!--xs:string 会议ID-->
        //	<StartIndex></StartIndex>				<!--xs:uint32 用于分页查询的索引，填0即可-->
        //</MedtMp4QueryReq>
        Element MedtMp4QueryReq = root.addElement("MedtMp4QueryReq");
        Element Type = MedtMp4QueryReq.addElement("Type");
        Type.setText("1");
        Element StartTime = MedtMp4QueryReq.addElement("StartTime");
        StartTime.setText("1498654654861");
        Element EndTime = MedtMp4QueryReq.addElement("EndTime");
        EndTime.setText("1507778225480");
        Element CatalogPath = MedtMp4QueryReq.addElement("CatalogPath");
        CatalogPath.setText("123456");//会议id
        Element StartIndex = MedtMp4QueryReq.addElement("StartIndex");
        StartIndex.setText("0");
        return root.asXML();
    }

    private static void removeRedundantElement(Element root) {
        List<Element> list = root.elements();
        if (list.size() == 2) {
            root.remove(list.get(1));
        }
    }

    private static String encode(Map<String,String> login) {
        String hexMd5String = "";
        try {
            hexMd5String = DigestUtils.md5Hex((login.get("username") + "," + login.get("password") + "," + login.get("authenticationid")).getBytes("UTF-8"));
        } catch (UnsupportedEncodingException e) {
            e.printStackTrace();
        }
        return Base64.encodeBase64String(hexMd5String.getBytes());
    }
}
