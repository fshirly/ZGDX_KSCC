package com.fable.kscc.api.skyCloud;

import org.apache.commons.net.ftp.FTPClient;
import org.apache.commons.net.ftp.FTPClientConfig;
import org.apache.commons.net.ftp.FTPFile;
import org.apache.commons.net.ftp.FTPReply;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

import java.io.*;
import java.util.*;

public class FtpUtil {

    private static String LOCAL_CHARSET = "utf-8";

    public static Logger logger = LoggerFactory.getLogger(FtpUtil.class);

    public static void main(String[] args) {
        DownFTPParam param = new DownFTPParam();
        param.setHost("202.127.28.81");
        param.setUsername("admin");
        param.setPassword("admin123");
        param.setPathDst("E:/test/");
        param.setPathSrc("/tmp/disk/02_02/2017年10月23日/0104880/");
//        param.setHost("192.168.6.30");
//        param.setUsername("duy");
//        param.setPassword("duy@1234");
//        param.setPathDst("E:/test/");
//        param.setPathSrc("/test/");
        FileDownload(param);
    }

    public static boolean FileDownload(DownFTPParam param) {

        boolean flag = false;

        FTPClient ftp = null;
        try {

            // ftp的数据下载
            ftp = new FTPClient();
            ftp.connect(param.getHost(), param.getPort());
            ftp.login(param.getUsername(), param.getPassword());
            ftp.setFileType(FTPClient.BINARY_FILE_TYPE);

            // 设置linux环境
            FTPClientConfig conf = new FTPClientConfig(FTPClientConfig.SYST_UNIX);
            ftp.configure(conf);

            // 判断是否连接成功
            int reply = ftp.getReplyCode();
            if (!FTPReply.isPositiveCompletion(reply)) {
                ftp.disconnect();
                System.out.println("FTP server refused connection.");
                return flag;
            }

            ftp.setControlEncoding(LOCAL_CHARSET);
            // 设置访问被动模式
            ftp.setRemoteVerificationEnabled(false);
            ftp.enterLocalPassiveMode();

            // 检索ftp目录下所有的文件，利用时间字符串进行过滤
            boolean dir = ftp.changeWorkingDirectory(new String(param.getPathSrc().getBytes("UTF-8"), "ISO8859-1"));
            if (dir) {
                FTPFile[] fs = ftp.listFiles();
                for (FTPFile f : fs) {
                    //三种文件类型.txt .properties .mp4
                    if (!f.getName().contains(".txt")) {
                        downloadLogic(param, ftp, f);
                        ftp.getReply();
                    }
                }
                //文件下载完成
                checkFile(param.getPathDst());
                flag = true;
            }
        } catch (Exception e) {
            e.printStackTrace();
            System.out.println(new Date() + "  ftp下载文件发生错误");
        } finally {
            try {
                if (ftp != null)
                    ftp.disconnect();
            } catch (IOException e) {
                e.printStackTrace();
            }
        }
        return flag;
    }

    private static void downloadLogic(DownFTPParam param, FTPClient ftp, FTPFile f) throws IOException {
        BufferedInputStream bis=null;
        BufferedOutputStream bos=null;
        try{
            System.out.println("我要的文件为:"+f.getName());
            System.out.println(new Date() + "开始下载文件");
            File localFile = new File(param.getPathDst() + f.getName());
            if(!localFile.getParentFile().exists()){
                localFile.getParentFile().mkdirs();
            }
            System.out.println(f.getSize());
            bis = new BufferedInputStream(
                    ftp.retrieveFileStream(new String(f.getName().getBytes("UTF-8"), "ISO8859-1")));
            bos = new BufferedOutputStream(new FileOutputStream(localFile));
            byte[] szBuf = new byte[128 * 1024];
            int dwRead;
            while ((dwRead = bis.read(szBuf, 0, 128 * 1024)) != -1) {
                bos.write(szBuf, 0, dwRead);
                bos.flush();
            }
        }
        catch (Exception e){
            e.printStackTrace();
        }
        finally {
            if(bis!=null)
                bis.close();
            if (bos!=null)
                bos.close();
        }
        System.out.println(new Date() + f.getName()+"    文件下载成功");
    }

    private static boolean checkFile(String dstPath) {
        BufferedReader in=null;
        List<Boolean> allSuccess = new ArrayList<>();
        try {
            File file = new File(dstPath);
            File[] files = file.listFiles();
            for (File file1 : files) {
                System.out.println(file1.getName());
                if ("MD5.properties".equals(file1.getName())) {
                    Properties properties = new Properties();
                    in = new BufferedReader(new InputStreamReader(new FileInputStream(dstPath + "MD5.properties"),"UTF-8"));
                    properties.load(in);
                    Iterator<String> it = properties.stringPropertyNames().iterator();
                    while (it.hasNext()) {
                        String fileName = it.next();
                        if(fileName.contains(".mp4")){
                            String srcMd5 = properties.getProperty(fileName);
                            String dstMd5 = MD5Utils.fileMD5(dstPath + fileName);
                            System.out.println("srcMd5:"+srcMd5);
                            System.out.println("dstMd5:"+dstMd5);
                            allSuccess.add(srcMd5.equalsIgnoreCase(dstMd5));
                        }
                    }
                }
            }
            for(Boolean bool:allSuccess){
                //文件不完整
                if(!bool){
                    System.out.println("文件MD5校验不完整");
                    return bool;
                }
            }
        } catch (Exception e) {
            e.printStackTrace();
        }
        finally {
            if (in!=null)
                try {
                    in.close();
                } catch (IOException e) {
                    e.printStackTrace();
                }
        }
        return true;
    }

}
