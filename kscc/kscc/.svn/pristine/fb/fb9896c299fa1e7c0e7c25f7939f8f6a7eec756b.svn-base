package com.fable.kscc.bussiness.service.fbsUser;

import java.util.HashMap;
import java.util.List;
import java.util.Map;

import com.fable.kscc.api.model.page.PageRequest;
import com.fable.kscc.api.model.page.PageResponse;
import com.fable.kscc.api.model.page.ResultKit;
import com.fable.kscc.api.model.page.ServiceResponse;
import com.github.pagehelper.Page;
import com.github.pagehelper.PageHelper;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Service;
import org.springframework.transaction.annotation.Propagation;
import org.springframework.transaction.annotation.Transactional;
import com.fable.kscc.api.exception.BussinessException;
import com.fable.kscc.api.model.user.FbsUser;
import com.fable.kscc.api.utils.MD5Encrypt;
import com.fable.kscc.bussiness.mapper.fbsUser.FbsUserMapper;
import com.fable.kscc.bussiness.mapper.fbsrole.FbsRoleMapper;

@Service
public class FbsUserServiceImpl implements FbsUserService {
	@Autowired
	private FbsUserMapper fbsUserMapper;

	@Autowired
	private FbsRoleMapper fbsRoleMapper;

	@Override
	public FbsUser getUser(FbsUser user) {
		return fbsUserMapper.queryFbUser(user);
	}

	/**
	 * 查询全部用户分页列表
	 */
	@Override
	public PageResponse<FbsUser> findAllPageUserList(PageRequest<FbsUser> pageRequest) {
		FbsUser map=pageRequest.getParam();
		Page<FbsUser> result = PageHelper.startPage(pageRequest.getPageNo(), pageRequest.getPageSize());
		fbsUserMapper.findAllPageUserList(map);
		return PageResponse.wrap(result);
	}

	@Override
	@Transactional(propagation= Propagation.REQUIRED)
	public int updateUser(Map<String,Object> params) {
		if(fbsUserMapper.searchUserByLoginName(params)>0){
			return 0;//判断登陆名是否存在
		}
		String pass = MD5Encrypt.encode(params.get("password").toString());
		params.put("password",pass);
		return fbsUserMapper.updateFbUser(params);
	}

	@Override
	@Transactional(propagation= Propagation.REQUIRED)
	public int updateHospitalUser(Map<String, Object> params) {
		return fbsUserMapper.updateHosipitalFbUser(params);
	}

	@Override
	@Transactional(propagation= Propagation.REQUIRED)
	public int deleteUser(String adminId) throws BussinessException {
		String[] id = adminId.split(",");
		int[] num = new int[id.length];
		for(int i=0; i<id.length;i++){
			num[i] = Integer.parseInt(id[i]) ;
		}
		fbsRoleMapper.deleteRole(num);
		return fbsUserMapper.deleteFbUser(num);
	}

	@Override
	@Transactional(propagation= Propagation.REQUIRED)
	public boolean insertUser(Map<String,Object> params) {
		if(fbsUserMapper.searchUserByLoginName(params)>0){
			return false;
		}
		FbsUser user = new FbsUser();
		String pass = MD5Encrypt.encode(params.get("password").toString());
		user.setLoginName(params.get("loginName").toString());
		user.setUserName(params.get("username").toString());
		user.setSector(params.get("sector").toString());
		user.setNewVideoNum(params.get("newVideoNum").toString());
		user.setCreatorId(params.get("creatorId").toString());
		user.setUserName(params.get("username").toString());
		user.setPassword(pass);
		user.setTelePhone(params.get("telePhone").toString());
//		user.setMobilePhone(params.get("").toString());
		user.setEmail(params.get("email").toString());
		user.setPassword(MD5Encrypt.encode(user.getPassword()));
		fbsUserMapper.insertFbUser(user);
		Map<String,Object> map = new HashMap<>();
		map.put("id",user.getId());
		map.put("creatorId","");
		return fbsUserMapper.setAdmin(map)>0;
	}

	/**
	 * 重置密码
	 * @param params
	 */
	@Override
	@Transactional(propagation= Propagation.REQUIRED)
	public int updatePass(Map<String,Object> params) {
		String pass = MD5Encrypt.encode("123456");
		FbsUser user = new FbsUser();
		user.setPassword(pass);
		user.setLoginName(params.get("loginName").toString());
		return fbsUserMapper.updatePass(user);
	}

	//查询所有用户列表
	@Override
	public List<FbsUser> findAllFbsUser() {
		return fbsUserMapper.findAllFbsUser();
	}


	/**
	 * 查看是否是kscc管理员
	 */
	@Override
	public int searchAdmin(int userId) {
		return fbsUserMapper.searchAdmin(userId);
	}

	@Override
	public FbsUser userByLoginName(Map<String, Object> params) {
		return fbsUserMapper.userByLoginName(params);
	}

	@Override
	public PageResponse<FbsUser> findAllPageHopitalUserList(PageRequest<FbsUser> pageRequest) {
		FbsUser map=pageRequest.getParam();
		Page<FbsUser> result = PageHelper.startPage(pageRequest.getPageNo(), pageRequest.getPageSize());
		fbsUserMapper.findAllPageHopitalUserList(map);
		return PageResponse.wrap(result);
	}

	@Override
	public boolean insertHospitorUser(Map<String, Object> params) {
		FbsUser user = new FbsUser();
		user.setUserName(params.get("username").toString());
		user.setGmsfhm(params.get("gmsfhm").toString());
		user.setDepartment(params.get("department").toString());
		user.setRank(params.get("rank").toString());
		user.setMobilePhone(params.get("mobilePhone").toString());
		user.setHospitalId(Integer.parseInt(params.get("hospitalId").toString()));
		int num = fbsUserMapper.insertFbUser(user);
		if(num>0){
			return true;
		}else{
			return false;
		}
	}

}
