package com.fable.kscc.bussiness.service.uploadfile;

import java.io.BufferedReader;
import java.io.File;
import java.io.FileInputStream;
import java.io.IOException;
import java.io.InputStreamReader;
import java.util.ArrayList;
import java.util.Date;
import java.util.HashMap;
import java.util.HashSet;
import java.util.Iterator;
import java.util.List;
import java.util.Map;
import java.util.Properties;
import java.util.Set;

import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Service;

import com.amazonaws.services.s3.AmazonS3Client;
import com.fable.kscc.api.model.page.PageRequest;
import com.fable.kscc.api.model.page.PageResponse;
import com.fable.kscc.api.model.upload.FbsLiveFile;
import com.fable.kscc.api.model.upload.UploadBean;
import com.fable.kscc.api.skyCloud.Common;
import com.fable.kscc.api.skyCloud.MultObjectOperate;
import com.fable.kscc.bussiness.mapper.uploadfile.UploadFileMapper;
import com.github.pagehelper.Page;
import com.github.pagehelper.PageHelper;

@Service("uploadFileServiceImpl")
public class UploadFileServiceImpl implements UploadFileService {
	
/*	 * 管理后台地址：http://oos.ctyun.cn/oos/v2/console.html<br/>
	     * 登录帐号是758253182@qq.com 密码是zy1234567890
	     */
	
	private final Logger LOG = LoggerFactory.getLogger(UploadFileServiceImpl.class);
	
	private final static String bucketName  = "www.karlstorz.com";
	
	@Autowired
	UploadFileMapper  uploadFileMapper;
	
	@Override
	public void uploadFile()throws Exception{
		
			List<UploadBean> list = uploadFileMapper.getUploadFileInfo();
			
			if(list==null||list.isEmpty())
			{
				System.out.println("uploadFile  list  is empty " + new Date());
				return;
			}
			
			String url = System.getProperty("user.dir");
			for (UploadBean up : list) {
				try {
					System.out.println("cloud upload === user.dir ="+url);
					// 所属目录
					String pathDst = url.substring(0, url.lastIndexOf(File.separator)) + File.separator + "record"
							+ File.separator + up.getConfId() + File.separator + up.getHospitalId() + File.separator;
					//String pathDst = "C:/file";
					System.out.println("cloud upload === pathDst =" + pathDst);
					//Set<String> md5set = getMd5(pathDst);
					//获取所有文件
					FilesGetter.clearList();
					FilesGetter.getFiles(pathDst);
					//上传文件
					doUpload(up,FilesGetter.getFilelist(),null);
					
					//判断上一级 confid目录下是无文件  
					/*String rootPath = url.substring(0, url.lastIndexOf(File.separator)) + File.separator + "record"
							+ File.separator + up.getConfId();
					System.out.println("cloud upload === rootPath ="+ rootPath);
					FilesGetter.clearList();
					FilesGetter.getFiles(rootPath);
					if(FilesGetter.getFilelist()==null || FilesGetter.getFilelist().isEmpty())
					{
						System.out.println("cloud upload === getFilelist is empty");
						//文件夹为空  删除文件夹
						File file = new File(rootPath);
						if(file.exists())
						{
							file.delete();
						}
					}*/
					
				} catch (Exception e) {
					e.printStackTrace();
				}
				
				 
			}
		
	}
	
	public void doUpload(UploadBean bean,List<String> filelist,Set<String> md5set)throws Exception
	{
		if(filelist==null || filelist.isEmpty())
		{
			return;
		}
		
		AmazonS3Client client = Common.getClient();
		
		MultObjectOperate mo = new MultObjectOperate(bucketName);
		
		//需要更新标识
		boolean status = true;
		
		try {
			
			for(String path : filelist)
			{
				System.out.println(new Date() + "doUpload  cloud upload path ==== " + path);
				//删除文件标识 
				boolean flag = false;
				File file = new File(path);
				//while(flag)
				//{
					String md5 = mo.multUploadObject(client,bean.getBucket()+"/"+file.getName(),path);
					System.out.println(new Date() + "doUpload  cloud upload   file MD5 = " + md5);
					/*for(String md : md5set)
					{
						System.out.println("云文件上传  文件MD5列表 = " + md);
						System.out.println("比较结果:" + md.equals(md5));
					}*/
					
					if("-".equals(md5))
					{
						flag = true;
					}
					else
					{
						System.out.println("MD5 COMPARE ERROR  path=" + path);
						status = false;
					}
				//}
				
				if(file.exists()&&flag)
				{
					//上传完成  删除原文件
					file.delete();
				}
			}
			
			
		} catch (Exception e) {
			status = false;
			e.printStackTrace();
		}
		
		if(status)
		{
			System.out.println("MD5 COMPARE SUCESS   update database ");
			bean.setStatus("1");
			//更新状态
			uploadFileMapper.updateUploadFile(bean);
		}
	}

	@Override
	public void deleteFile(String bucket, String key,String id) throws Exception{
		try {
			System.out.println("delete file == bucket=" + bucket + " key =" + key);
			AmazonS3Client client = Common.getClient();
			client.deleteObject(bucketName, bucket + File.separator + key);
			
			//更新状态
			uploadFileMapper.deleteFile(id);
			
		} catch (Exception e) {
			throw e;
		}
		
	}

	@Override
	public void renameFile(String bucket, String key, String name,String id) throws Exception{
		try {
			AmazonS3Client client = Common.getClient();
			client.copyObject(bucketName, bucket+File.separator+key, bucketName, bucket+File.separator+name);
			client.deleteObject(bucketName, bucket+File.separator+key);
			
			UploadBean bean = new UploadBean();
			bean.setId(Integer.valueOf(id));
			bean.setFilename(name);
			uploadFileMapper.renameFile(bean);
		} catch (Exception e) {
			throw e;
		}
	}

	@Override
	public PageResponse<FbsLiveFile> getLiveFileList(PageRequest<Map<String, Object>> pageRequest) {
		try {
			Map<String,Object> map = new HashMap<String,Object>();
			Page<FbsLiveFile> result = new Page<FbsLiveFile>();
			if(pageRequest!=null)
			{
				map=pageRequest.getParam();
				result = PageHelper.startPage(pageRequest.getPageNo(), pageRequest.getPageSize());
				/*map = new HashMap<String,Object>();
		        result = PageHelper.startPage(1, 5);*/
			}
	        List<FbsLiveFile> list = uploadFileMapper.selectByCondition(map);
	        PageResponse<FbsLiveFile> pr = PageResponse.wrap(result) ;
	        List<FbsLiveFile> fileList = new ArrayList<FbsLiveFile>();
	        if(list!=null && !list.isEmpty())
	        {
		        fileList = uploadFileMapper.getFileByCondition(list);
	        }
	        pr.setData(fileList);
	        return pr;
		} catch (Exception e) {
			throw e;
		}
	}
	
	private Set<String> getMd5(String dstPath) {
		Set<String> md5set = new HashSet<String>();
        BufferedReader in = null;
        try {
            File file = new File(dstPath);
            File[] files = file.listFiles();
            for (File file1 : files) {
                if ("MD5.properties".equals(file1.getName())) {
                    Properties properties = new Properties();
                    in = new BufferedReader(new InputStreamReader(new FileInputStream(dstPath + "MD5.properties"), "UTF-8"));
                    properties.load(in);
                    Iterator<String> it = properties.stringPropertyNames().iterator();
                    while (it.hasNext()) {
                        String fileName = it.next();
                        if (fileName.contains(".mp4")) {
                        	md5set.add(properties.getProperty(fileName));
                        }
                    }
                }
            }
        } catch (Exception e) {
            e.printStackTrace();
        } finally {
            if (in != null)
                try {
                    in.close();
                } catch (IOException e) {
                    e.printStackTrace();
                }
        }
        return md5set;
    }
}
