package com.fable.kscc.bussiness.service.hospitalInformation;

import java.text.ParseException;
import java.text.SimpleDateFormat;
import java.util.*;
import java.util.concurrent.ExecutorService;

import com.fable.kscc.api.cache.DataCache;
import com.fable.kscc.api.exception.BussinessException;
import com.fable.kscc.api.kedaApi.KedaApi;
import com.fable.kscc.api.model.page.PageRequest;
import com.fable.kscc.api.model.page.PageResponse;
import com.fable.kscc.api.model.page.ResultKit;
import com.fable.kscc.api.model.page.ServiceResponse;
import com.fable.kscc.api.model.user.FbsUser;
import com.fable.kscc.api.model.userRole.FbsUserRole;
import com.fable.kscc.api.utils.MD5Encrypt;
import com.fable.kscc.bussiness.mapper.fbuserrole.FabUserRoleMapper;
import com.fable.kscc.bussiness.service.enrollMedT.EnrollMedT;
import com.fable.kscc.bussiness.service.enrollMedT.MEDTInit;
import com.fable.kscc.bussiness.service.enrollMedT.ThreadPoolUtils;
import com.github.pagehelper.Page;
import com.github.pagehelper.PageHelper;
import net.sf.ezmorph.bean.MorphDynaBean;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Service;

import com.fable.kscc.api.model.hospitalInformation.FbsHospitalInformation;
import com.fable.kscc.api.model.liveCodec.FbsLiveCodec;
import com.fable.kscc.bussiness.mapper.hospitalInformation.HospitalInformationMapper;
import com.fable.kscc.bussiness.mapper.fbsUser.FbsUserMapper;
import com.fable.kscc.bussiness.mapper.livecodec.LiveCodecMapper;
import org.springframework.transaction.annotation.Propagation;
import org.springframework.transaction.annotation.Transactional;

@Service
public class HospitalInformationServiceImpl implements HospitalInformationService {

    @Autowired
    private HospitalInformationMapper hospitalInformationMapper;

    @Autowired
    private LiveCodecMapper liveCodecMapper;

    @Autowired
    private FbsUserMapper ksUserMapper;

    @Autowired
    private FabUserRoleMapper fabUserRoleMapper;

    private SimpleDateFormat format = new SimpleDateFormat("yyyy-MM-dd HH:mm");

    @Override
    public List<FbsHospitalInformation> getHospitalInformationList(String id) {
        List<FbsHospitalInformation> hospitalBeanList = hospitalInformationMapper.getHospitalInformationList(id);
        //查询用户表中医院id为0的所有用户名称
        List<FbsUser> userList = ksUserMapper.queryUserByHospitalId();
        for (int i =0;i<userList.size();i++){
            FbsHospitalInformation hosBean = new FbsHospitalInformation();
            String userName = userList.get(i).getUserName();
            hosBean.setHospitalName(userName);
            hospitalBeanList.add(hosBean);
        }
        return hospitalBeanList;
    }

    /**
     */
    @Override
    public List<Map<String, Object>> selectHospital(Map<String, Object> param) {
        List<Map<String, Object>> list = new ArrayList<Map<String, Object>>();
        Map<String, Object> params = new HashMap<String, Object>();
        String searchCon = String.valueOf(param.get("searchCon"));
        params.put("searchCon", searchCon);
        List<FbsHospitalInformation> hospitalInfos = hospitalInformationMapper.selectHospital(params);
        for (FbsHospitalInformation hospitalInfo : hospitalInfos) {
            int id = hospitalInfo.getId();
            Map<String, Object> map = new HashMap<String, Object>();
            List<FbsLiveCodec> childMenuList = liveCodecMapper.findAllLiveCodec(id);
            map.put("id", hospitalInfo.getId().toString());
            map.put("name", hospitalInfo.getHospitalName());
            map.put("pid", "0");
            list.add(map);
            Map<String, Object> childmap = new HashMap<String, Object>();
            for (FbsLiveCodec fbsLiveCodec : childMenuList) {
                childmap.put("id", fbsLiveCodec.getId().toString() + hospitalInfo.getId().toString());
                childmap.put("name", fbsLiveCodec.getCodecOwnership());
                childmap.put("pid", fbsLiveCodec.getHospitalId().toString());
                list.add(childmap);
            }
        }
        return list;
    }

    /**
     */
    @Override
    public List<Map<String, Object>> selectHospitalInfo() {
        List<Map<String, Object>> list = new ArrayList<Map<String, Object>>();
        List<FbsHospitalInformation> hospitalInfos = hospitalInformationMapper.selectHospitalInfo();
        for (FbsHospitalInformation hospitalInfo : hospitalInfos) {
            int id = hospitalInfo.getId();
            Map<String, Object> map = new HashMap<String, Object>();
            List<FbsLiveCodec> childMenuList = liveCodecMapper.findAllLiveCodec(id);
            map.put("id", hospitalInfo.getId().toString());
            map.put("name", hospitalInfo.getHospitalName());
            map.put("pid", "0");
            list.add(map);
            Map<String, Object> childmap = new HashMap<String, Object>();
            for (FbsLiveCodec fbsLiveCodec : childMenuList) {
                childmap.put("id", fbsLiveCodec.getId().toString() + hospitalInfo.getId().toString());
                childmap.put("name", fbsLiveCodec.getCodecOwnership());
                childmap.put("pid", fbsLiveCodec.getHospitalId().toString());
                list.add(childmap);
            }

        }
        return list;
    }

    /**
     * modifyCheckHospital
     */
    @Override
    public List<Map<String, Object>> checkHospital(String startTime, String endTime, String ids, String liveId) {
        List<Map<String, Object>> list = new ArrayList<Map<String, Object>>();
        Map<String, Object> params = new HashMap<String, Object>();
        params.put("startTime", startTime);
        params.put("endTime", endTime);
        params.put("name", "");
        params.put("liveId", liveId);
        List<FbsHospitalInformation> hospitalInfos = hospitalInformationMapper.findAllHospitalInfo(params);//获取符合条件的医院
        List<String> idList = new ArrayList<>();
        for (FbsHospitalInformation info : hospitalInfos) {
            idList.add(info.getId() + "");
        }
        String[] id = ids.split(",");
        String str = "";
        Map<String, Object> map = new HashMap<String, Object>();
        int count = 0;

        checkUnion(hospitalInfos, idList, id, str, map, count);

        list.add(map);
        return list;
    }

    public List<Map<String, Object>> modifyCheckHospital(String startTime, String endTime, String oldStartTime, String oldEndTime, String ids, String liveId) {
        List<Map<String, Object>> list = new ArrayList<Map<String, Object>>();
        Map<String, Object> params = new HashMap<String, Object>();
        Date start = null, end = null, oldStart = null, oldEnd = null;
        try {
            start = format.parse(startTime);
            end = format.parse(endTime);
            oldStart = format.parse(oldStartTime);
            oldEnd = format.parse(oldEndTime);
        } catch (ParseException e) {
            e.printStackTrace();
        }
        String[] id = ids.split(",");
        List<FbsHospitalInformation> hospitalInfos;
        if (start.getTime() >= oldStart.getTime() && end.getTime() <= oldEnd.getTime()) {
            hospitalInfos = hospitalInformationMapper.getHospitalInformationList(id[0]);
        } else {
            if (start.getTime() >= oldStart.getTime() && start.getTime() < oldEnd.getTime()) {
                startTime = oldEndTime;
            } else if (end.getTime() <= oldEnd.getTime() && end.getTime() > oldStart.getTime()) {
                endTime = oldStartTime;
            }
            params.put("startTime", startTime);
            params.put("endTime", endTime);
            params.put("name", "");
            params.put("liveId", liveId);
            hospitalInfos = hospitalInformationMapper.findAllHospitalInfo(params);//获取符合条件的医院
        }
        List<String> idList = new ArrayList<>();
        for (FbsHospitalInformation info : hospitalInfos) {
            idList.add(info.getId() + "");
        }
        String str = "";
        Map<String, Object> map = new HashMap<String, Object>();
        int count = 0;

        checkUnion(hospitalInfos, idList, id, str, map, count);

        list.add(map);
        return list;
    }

    private void checkUnion(List<FbsHospitalInformation> hospitalInfos, List<String> idList, String[] id, String str, Map<String, Object> map, int count) {
        if (id.length == 1) {
            for (FbsHospitalInformation hospitalInfo : hospitalInfos) {
                String num = id[0];
                if (num.equals(hospitalInfo.getId().toString())) {
                    hospitalInfos.clear();
                    hospitalInfos.add(hospitalInfo);
                    map.put("list", hospitalInfos);
                    count = 1;
                    break;
                }
            }
            if (count != 1) {
                map.put("nonConformity", "当前医院");
            }
        } else {
            for (int i = 0; i < id.length; i++) {
                if (!idList.contains(id[i])) {
                    String nonHospitalName = hospitalInformationMapper.findAllById(Integer.parseInt(id[i]));
                    if ("".equals(str)) {
                        str = str + nonHospitalName;
                    } else {
                        str = str + "," + nonHospitalName;
                    }
                }
            }
            map.put("nonConformity", str);
            map.put("list", hospitalInfos);
        }
    }

    /**
     */
    @Override
    public FbsHospitalInformation getHospitalInfoByUser(int id) {
        FbsHospitalInformation hospitalInfo = new FbsHospitalInformation();
        int success = ksUserMapper.searchAdmin(id);
        if (success > 0) {
            return hospitalInfo;
        } else {
            hospitalInfo = hospitalInformationMapper.getHospitalInfoByUser(id);
//			hospitalInfo.setSerialNumber(1);
            return hospitalInfo;
        }
    }


    //日程校验(筛选出符合当前直播间时间的参与方医院)邀请参与方页面接口
    @Override
    public List<Map<String, Object>> screenHospital(Map<String, Object> params) {
        List<Map<String, Object>> list = new ArrayList<Map<String, Object>>();
        List<Integer> param = (List<Integer>) params.get("hospitalIds");
        List<FbsHospitalInformation> hospitalInfos = hospitalInformationMapper.getHospitalForAddParticipant(param);//获取符合条件的医院
        for (int i = 0; i < hospitalInfos.size(); i++) {
            int id = hospitalInfos.get(i).getId();
            Map<String, Object> map = new HashMap<String, Object>();
            List<FbsLiveCodec> childMenuList = liveCodecMapper.findAllLiveCodec(id);
            map.put("id", hospitalInfos.get(i).getId().toString());
            map.put("name", hospitalInfos.get(i).getHospitalName());
            map.put("newvoidNum", hospitalInfos.get(i).getNewVideoNum());
            map.put("pid", "0");
            list.add(map);
            Map<String, Object> childmap = new HashMap<String, Object>();
            for (int j = 0; j < childMenuList.size(); j++) {
                childmap.put("id", childMenuList.get(j).getId().toString() + hospitalInfos.get(j).getId().toString());
                childmap.put("name", childMenuList.get(j).getCodecOwnership());
                childmap.put("pid", childMenuList.get(j).getHospitalId().toString());
                childmap.put("newvoidNum", childMenuList.get(j).getNewvideoNum().toString());
                list.add(childmap);
            }
        }
        return list;
    }

    @Override
    public FbsHospitalInformation selectHospitalById(Map params) {

        List<FbsHospitalInformation> fbsHospitalInformations = hospitalInformationMapper.selectHospitalById(params);
        return fbsHospitalInformations.get(0);
    }

    @Override
    @Transactional
    public boolean insertHospitalInfo(Map params) {
        //医院
        FbsHospitalInformation information = new FbsHospitalInformation();
        information.setHospitalName(params.get("hospitalName").toString());
        information.setHospitalContent(params.get("hospitalContent").toString());
        information.setHospitalUrl(params.get("hospitalUrl").toString());
        int insertNum = hospitalInformationMapper.insertFbsHospitalInfo(information);


        //用户
        FbsUser user = new FbsUser();
        String pass = MD5Encrypt.encode(params.get("user_password").toString());
        user.setPassword(pass);
        user.setLoginName(params.get("loginName").toString());
        user.setMobilePhone(params.get("mobilePhone").toString());
        user.setEmail(params.get("email").toString());
        if("".equals(params.get("hospitalId"))){//.equal()){
            //通过医院名称查询相应的医院id
            FbsHospitalInformation bean = hospitalInformationMapper.getHospitalIdByName(params.get("hospitalName").toString());
            user.setHospitalId(bean.getId());
        }else{
            user.setHospitalId(Integer.parseInt(params.get("hospitalId").toString()));
        }
        ksUserMapper.insertFbUser(user);
        FbsUserRole roleBean = new FbsUserRole();
        roleBean.setUserId(user.getId().toString());
        roleBean.setRoleId("2");//医院管理员角色
        fabUserRoleMapper.insertFabUserRole(roleBean);


        //编解码
        FbsLiveCodec code = new FbsLiveCodec();
        code.setCodecOwnership(params.get("codecOwnership").toString());
        code.setIp(params.get("ip").toString());
        //code.setMac(params.get("mac").toString());
        code.setNewvideoNum(params.get("newvideoNum").toString());
        //增加端口号，用户名，密码
        code.setPort(params.get("port").toString());
        code.setUserName(params.get("username").toString());
        code.setPassword(params.get("code_password").toString());
        //FTPport端口
        code.setFtpPort(params.get("ftpPort").toString());
        if("".equals(params.get("hospitalId"))){//.equal()){
            //通过医院名称查询相应的医院id
            FbsHospitalInformation bean = hospitalInformationMapper.getHospitalIdByName(params.get("hospitalName").toString());
            code.setHospitalId(bean.getId());
        }else{
            code.setHospitalId(Integer.parseInt(params.get("hospitalId").toString()));
        }
        int insertFlag = liveCodecMapper.insertLiveCode(code);
        if (insertFlag == 1) {
            DataCache.getInstance().addCache("flag",false);
            List<Map<String,String>> loginQueue = liveCodecMapper.selectMedTProperties();
            ExecutorService threadPool = ThreadPoolUtils.getThreadPool();
            DataCache.getInstance().addCache("flag",true);
            EnrollMedT.threadStart(loginQueue,threadPool);
            return true;
        }
        return false;

    }

    @Override
    public List<Map<String, Object>> queryTreeInfo(Map<String, Object> param) {
        //查询不同用户所能看到的医院信息
        List<Map<String, Object>> list = new ArrayList<Map<String, Object>>();
        List<FbsHospitalInformation> hospitalInfos = new ArrayList<FbsHospitalInformation>();
        int userId = Integer.parseInt(param.get("id").toString());
        //根据用户id查询相应的角色
        String roleId = fabUserRoleMapper.queryRoleByUserId(userId).getRoleId();
        if (1 == Integer.parseInt(roleId)) { //kscc管理员用户
            Map<String, Object> map0 = new HashMap<String, Object>();
            map0.put("id", 0);
            map0.put("pid", 0);
            map0.put("name", "医院列表");
            map0.put("address", "/loginController/toHospitalList");
            list.add(map0);

            hospitalInfos = hospitalInformationMapper.selectHospitalInfo();
            for (int i = 0; i < hospitalInfos.size(); i++) {
                Map<String, Object> map = new HashMap<String, Object>();
                int id = hospitalInfos.get(i).getId();
                //通过医院id查询相应的管理员用户id
                Map<String, Object> paraMap = new HashMap<>();
                paraMap.put("hospitalId", id);
                FbsUser userBean = ksUserMapper.queryHostUser(paraMap);

                map.put("id", id);
                map.put("pid", hospitalInfos.get(i).getId().toString());
                map.put("name", hospitalInfos.get(i).getHospitalName().toString());
                map.put("address", "/loginController/toHospitalInfo?id=" + id);
                list.add(map);
                Map<String, Object> map1 = new HashMap<String, Object>();
                map1.put("id", id + 1);
                map1.put("pid", id);
                map1.put("name", "管理员");
                if (null != userBean) {
                    map1.put("address", "/loginController/toHospitalAdmin?id=" + id);
                } else {
                    map1.put("address", "/loginController/toHospitalAdmin?id=" + id);
                }
                list.add(map1);
                Map<String, Object> map2 = new HashMap<String, Object>();
                map2.put("id", id + 2);
                map2.put("pid", id);
                map2.put("name", "医生用户");
                map2.put("address", "/loginController/toDoctorUser?id=" + id);
                list.add(map2);
                Map<String, Object> map3 = new HashMap<String, Object>();
                map3.put("id", id + 3);
                map3.put("pid", id);
                map3.put("name", "编解码器");
                map3.put("address", "/loginController/toCodec?id=" + id);
                list.add(map3);
            }
        } else {
            //普通医院管理员用户
            FbsHospitalInformation hospital = hospitalInformationMapper.getHospitalInfoByUser(userId);
            int hospitalId = hospital.getId();
            //通过医院id查询相应的管理员用户id
            Map<String, Object> paraMap = new HashMap<>();
            paraMap.put("hospitalId", hospitalId);
            FbsUser userBean = ksUserMapper.queryHostUser(paraMap);

            Map<String, Object> map = new HashMap<String, Object>();
            int id = hospital.getId();
            map.put("id", id);
            map.put("pid", hospital.getId().toString());
            map.put("name", hospital.getHospitalName().toString());
            map.put("address", "/loginController/toHospitalInfo?id=" + hospitalId);
            list.add(map);
            Map<String, Object> map1 = new HashMap<String, Object>();
            map1.put("id", id + 1);
            map1.put("pid", id);
            map1.put("name", "管理员");
            map1.put("address", "/loginController/toHospitalAdmin?id=" + hospitalId);
            list.add(map1);
            Map<String, Object> map2 = new HashMap<String, Object>();
            map2.put("id", id + 2);
            map2.put("pid", id);
            map2.put("name", "医生用户");
            map2.put("address", "/loginController/toDoctorUser?id=" + id);
            list.add(map2);
            Map<String, Object> map3 = new HashMap<String, Object>();
            map3.put("id", id + 3);
            map3.put("pid", id);
            map3.put("name", "编解码器");
            map3.put("address", "/loginController/toCodec?id=" + id);
            list.add(map3);
        }
        return list;
    }

    @Override
    public PageResponse<FbsHospitalInformation> findAllPageLiveHospitalList(PageRequest<FbsHospitalInformation> pageRequest) {
        FbsHospitalInformation map = pageRequest.getParam();
        Page<FbsHospitalInformation> result = PageHelper.startPage(pageRequest.getPageNo(), pageRequest.getPageSize());
        hospitalInformationMapper.findAllPageLiveHospitalList(map);
        return PageResponse.wrap(result);
    }

    @Override
    @Transactional(propagation = Propagation.REQUIRED)
    public int updateLiveHospital(Map<String, Object> params) {
        return hospitalInformationMapper.updateLiveHospital(params);
    }

    @Override
    public FbsHospitalInformation getHospital(FbsHospitalInformation hospital) {
        return hospitalInformationMapper.queryLiveHospital(hospital);
    }

    @Override
    @Transactional(propagation = Propagation.REQUIRED)
    public int deleteHospital(String ids) throws BussinessException {
        String[] id = ids.split(",");
        int[] num = new int[id.length];
        int hospitalId = 0;
        for (int i = 0; i < id.length; i++) {
            num[i] = Integer.parseInt(id[i]);
            hospitalId = num[i];
            //删除相应的管理员用户和编解码器信息
            FbsUser userBean = ksUserMapper.getFbUserByhospitalId(hospitalId);
            int roleFlag = fabUserRoleMapper.deleteUserRoleById(userBean.getId());
            int userFlag = ksUserMapper.deleteFbUserByhospitalId(hospitalId);
            int codeFlag = liveCodecMapper.deleteCodeByHospitalId(hospitalId);
            if (userFlag > 1 && roleFlag > 1 && codeFlag > 1) {
                continue;
            }
        }
        int deleteFlag = hospitalInformationMapper.deleteLiveHospital(num);
        if (deleteFlag == 1) {
            DataCache.getInstance().addCache("flag",false);
            List<Map<String,String>> loginQueue = liveCodecMapper.selectMedTProperties();
            ExecutorService threadPool = ThreadPoolUtils.getThreadPool();
            DataCache.getInstance().addCache("flag",true);
            EnrollMedT.threadStart(loginQueue,threadPool);
        }
        return deleteFlag;
    }
}

