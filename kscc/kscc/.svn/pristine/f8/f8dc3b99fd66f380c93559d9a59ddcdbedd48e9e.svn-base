package com.fable.kscc.bussiness.service.apiService;

import com.fable.kscc.api.medTApi.MedTApi;
import com.fable.kscc.api.model.hospitalInformation.FbsHospitalInformation;
import com.fable.kscc.api.model.liveCodec.FbsLiveCodec;
import com.fable.kscc.api.model.page.ResultKit;
import com.fable.kscc.api.model.page.ServiceResponse;
import com.fable.kscc.bussiness.mapper.hospitalInformation.HospitalInformationMapper;
import com.fable.kscc.bussiness.mapper.livecodec.LiveCodecMapper;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Service;

import javax.persistence.criteria.CriteriaBuilder;
import java.rmi.MarshalledObject;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

/**
 * <p>
 * Title :
 * </p>
 * <p>
 * Description:
 * </p>
 * <p>
 * Author :Hairui
 * Date :2017/11/15
 * Time :15:36
 * </p>
 * <p>
 * Department :
 * </p>
 * <p> Copyright : 江苏飞博软件股份有限公司 </p>
 */
@Service
public class ApiServiceImpl implements IApiService {

    @Autowired
    HospitalInformationMapper hospitalInformationMapper;
    @Autowired
    private MedTApi medApi;
    @Autowired
    private LiveCodecMapper liveCodecMapper;
    @Override
    public ServiceResponse getAllHospitalList() {
        return ResultKit.serviceResponse(hospitalInformationMapper.getAllHospitalList());
    }

    @Override
    public ServiceResponse getDisk(Map<String,String> param) {
        //根据医院id查询相应的医院信息
        List<FbsLiveCodec> codeList = liveCodecMapper.findAllLiveCodecForYw(param);
        Map<String,String> map = new HashMap<>();
        List<Map<String,Object>> arryList = new ArrayList<>();
        for (FbsLiveCodec code : codeList){
            map.put("ip",code.getIp());
            map.put("port",code.getPort());
            map.put("username",code.getUserName());
            map.put("password",code.getPassword());
            map.put("hospitalId",String.valueOf(code.getHospitalId()));
            Map<String,Object> codeMap = medApi.getDisks(map);
            Map<String,Object> mpuVidMap = medApi.getMpuVidEnc(map);
            //计算分辨率
            String resoultion = mpuVidMap.get("Width").toString() + "*" + mpuVidMap.get("Height").toString();
            codeMap.put("resoultion",resoultion);
            //计算帧数

            //计算剩余空间
            Integer remainStorm = Integer.parseInt(codeMap.get("Capacity").toString()) - Integer.parseInt(codeMap.get("Free").toString());
            codeMap.put("remainStorm",remainStorm);
            //计算使用率
            Double num = Math.floor(remainStorm/Integer.parseInt(codeMap.get("Capacity").toString()));
            codeMap.put("useage",num*100);
            //讯世通账号、ip、医院名称、归属医院
            String hospitalName = hospitalInformationMapper.findAllById(Integer.parseInt(code.getHospitalId().toString()));//根据医院id查询相应的医院名称
            codeMap.put("newvideoNum",code.getNewvideoNum());
            codeMap.put("ip",code.getIp());
            codeMap.put("hospitalName",hospitalName);
            codeMap.put("codecOwnership",code.getCodecOwnership());
            arryList.add(codeMap);
        }
        return ResultKit.serviceResponse(arryList);
    }

    @Override
    public ServiceResponse getDiskInfo(Map<String,String> param) {
        //根据医院id查询相应的医院信息
        List<FbsLiveCodec> codeList = liveCodecMapper.findAllLiveCodecForYw(param);
        Map<String,String> map = new HashMap<>();
        List<Map<String,Object>> arryList = new ArrayList<>();
        for (FbsLiveCodec code : codeList){
            map.put("ip",code.getIp());
            map.put("port",code.getPort());
            map.put("username",code.getUserName());
            map.put("password",code.getPassword());
            map.put("hospitalId",String.valueOf(code.getHospitalId()));
            Map<String,Object> codeMap = null;
            codeMap = medApi.getDiskInfo(map);
            arryList.add(codeMap);
        }
        return ResultKit.serviceResponse(arryList);
    }
}
